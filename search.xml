<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学Java的第4天</title>
      <link href="/posts/43887.html"/>
      <url>/posts/43887.html</url>
      
        <content type="html"><![CDATA[<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>原则上是低———-&gt;高<br>byte,short,char-&gt;int-&gt;long-&gt;float-&gt;double<br>运算中，不同类型的数据先转化为同一类型，然后再进行运算<br><strong>注意数据溢出问题</strong></p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>高—–&gt;低<br>在数据前面加上(数据类型)</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//可以用下划线_分割数字，不改变大小</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10_0000_0000</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> c1<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token keyword">long</span> c2<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token keyword">long</span> c3<span class="token operator">=</span>a<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出负数溢出了</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出还是负数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出正常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明是先计算再赋值，先计算结果溢出了，赋值给long类型的c还是溢出后的结果</p><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>低—–&gt;高<br>(int)1.1;<br>//输出1</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量就是可以变化的量<br>局部变量必须声明初始值  </p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量初始化后不能变化<br>final 常量名=值<br>常量名一般用大写</p><h2 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h2><ol><li>所有变量、方法、类名：用英语，见名知意</li><li>类成员变量：首字母小写和驼峰原则：monthSalary</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：大写字母和下划线：MAX_VALUE</li><li>类名：首字母大写和驼峰原则：Man、GoodMan</li><li>方法名：首字母小写和驼峰原则：run()，runRun()</li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算术运算符：+，-，*，/，%，++，–</li><li>赋值运算符：=</li><li>关系运算符：&gt;，&lt;，&gt;=，&lt;=，==，!=instanceof</li><li>逻辑运算符：&amp;&amp;，||，!</li><li>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;（了解）</li><li>条件运算符?，:</li><li>扩展赋值运算符：+=，-=，*=，/=</li></ul><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>int a = 3;<br>int b = a++;<br>//先赋值再自增，此时a=4，b=3<br>int c = ++a;<br>//先自增再赋值，此时a=5，c=5</p><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>int a = 1;<br>int b = 2;<br>int c = a&gt;b?a:b;<br>//a&gt;b为true则c=a=1；否则c=b=2；</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事必先利其器1</title>
      <link href="/posts/8983.html"/>
      <url>/posts/8983.html</url>
      
        <content type="html"><![CDATA[<h2 id="自用的Idea插件"><a href="#自用的Idea插件" class="headerlink" title="自用的Idea插件"></a>自用的Idea插件</h2><p>很多优秀的插件确实能大幅提升效率，省去安装其他软件的臃肿问题</p><hr><h3 id="1-Chinese-Simplified-Language-Pack-中文语言包"><a href="#1-Chinese-Simplified-Language-Pack-中文语言包" class="headerlink" title="1.Chinese(Simplified)Language Pack/中文语言包"></a>1.Chinese(Simplified)Language Pack/中文语言包</h3><blockquote><p>官方中文汉化包，适合刚接触Idea且英语不好的开发者。<br>中文语言包将为您的 IntelliJ IDEA, AppCode, CLion, DataGrip, GoLand, PyCharm, PhpStorm, RubyMine, 和WebStorm 带来完全中文化的界面。</p></blockquote><h3 id="2-Ide-Eval-Reset"><a href="#2-Ide-Eval-Reset" class="headerlink" title="2.Ide Eval Reset"></a>2.Ide Eval Reset</h3><blockquote><p>暂时没钱入正，靠这个插件重置30天试用期续命。<br>登录账号试用IDE，安装设置好本插件，退出登录账号重启IDE即可。<br>市场付费插件的试用信息也会一并重置。<br><code>MyBatisCodeHelperPro (Marketplace Edition)</code>可重置！<br>安装方式比较特殊，官方的插件商店肯定搜不到。<br>详情见<a href="https://zhile.io/2020/11/18/jetbrains-eval-reset-da33a93d.html">原作者博客文章</a>  </p></blockquote><p><code>IDEA_2021.3已经彻底不支持离线试用，本重置插件已失效。可以考虑暂缓升级至2021.3！</code></p><h3 id="3-Translation"><a href="#3-Translation" class="headerlink" title="3.Translation"></a>3.Translation</h3><blockquote><p>字面意思，一个翻译插件。<br>设置里面可以配置自己的百度开发者翻译引擎。<br>使用说明：选中单词，鼠标右键“翻译”。或者快捷键Ctrl + Shift + Y<br>详细说明请参考官方文档<a href="https://yiiguxing.github.io/TranslationPlugin/start.html">开始使用</a></p></blockquote><h3 id="4-Rainbow-Brackets"><a href="#4-Rainbow-Brackets" class="headerlink" title="4.Rainbow Brackets"></a>4.Rainbow Brackets</h3><blockquote><p>彩虹括号。效果预览如下：<br><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202112010829732.png" alt="RainbowBrackets预览图"><br>方便区分括号层级。</p></blockquote><h3 id="5-Free-MyBatis-plugin"><a href="#5-Free-MyBatis-plugin" class="headerlink" title="5.Free MyBatis plugin"></a>5.Free MyBatis plugin</h3><blockquote><p>free-idea-mybatis是一款增强idea对mybatis支持的插件，主要功能如下：</p><ul><li>生成mapper xml文件</li><li>快速从代码跳转到mapper及从mapper返回代码</li><li>mybatis自动补全及语法错误提示</li><li>集成mybatis generator gui界面</li><li>根据数据库注解，生成swagger model注解</li></ul></blockquote><h3 id="6-MyBatisCodeHelperPro-Marketplace-Edition"><a href="#6-MyBatisCodeHelperPro-Marketplace-Edition" class="headerlink" title="6.MyBatisCodeHelperPro (Marketplace Edition)"></a>6.MyBatisCodeHelperPro (Marketplace Edition)</h3><blockquote><ul><li>用Ide Eval Reset可以重置试用期限</li><li>和其他mybatis插件冲突不能同时启用</li><li>功能很强大，但我暂时用不明白</li><li>有空去看看原作者在b站发的教学视频</li></ul></blockquote><iframe src="//player.bilibili.com/player.html?aid=83628121&amp;bvid=BV1iJ41177GK&amp;cid=143067415&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="7-RestfulTool"><a href="#7-RestfulTool" class="headerlink" title="7.RestfulTool"></a>7.RestfulTool</h3><blockquote><p>一套 Restful 服务开发辅助工具集</p><ol><li>提供了一个 Services tree 的显示窗口</li><li>双击 URL 直接跳转到对应的方法定义</li><li>一个简单的 http 请求工具</li><li>支持 Spring 体系 (Spring MVC / Spring Boot)</li><li>支持 JAX-RS</li><li>支持 <code>Navigate -&gt; Request Service</code> 搜索 Mapping (Ctrl + Alt + /)</li></ol><p>自带接口调试功能，虽然不能像PostMan一样保存调试的记录。但我还是卸载了PostMan选择了这个，因为这个插件精简且不占空间。</p></blockquote><h3 id="8-Maven-Helper"><a href="#8-Maven-Helper" class="headerlink" title="8.Maven Helper"></a>8.Maven Helper</h3><blockquote><p>一键查看maven依赖树，查看冲突的依赖.</p><ul><li>分析和排除冲突依赖关系的简便方法</li><li>为包含当前文件的模块或根模块运行/调试maven目标的操作</li><li>在当前maven模块路径上打开终端的操作</li><li>运行/调试当前测试文件的操作。</li></ul><p>用法：</p><ul><li>在编辑器中单击鼠标右键|运行Maven</li><li>在项目视图工具栏中单击鼠标右键|（运行|调试）Maven</li><li>CTRL+ALT+R-“运行Maven目标”弹出窗口（您可以在弹出窗口中使用Delete&gt;- 键）</li><li>CTRL+SHIFT+ALT+R-“在根模块上运行Maven目标”弹出窗口（您可以在弹出窗口中使用Delete键）</li><li>自定义目标：设置|其他设置| Maven助手</li><li>定义快捷方式：设置|键映射|插件| Maven助手</li><li>打开pom文件，单击“依赖项分析器”选项卡，右键单击树中的上下文操作。</li></ul></blockquote><h3 id="9-Key-Promoter-X"><a href="#9-Key-Promoter-X" class="headerlink" title="9.Key Promoter X"></a>9.Key Promoter X</h3><blockquote><ul><li>快捷键提示</li><li>当你执行一个操作没使用快捷键时会提示你</li><li>每次提示都会留下记录</li><li>会推荐你很多次都没使用过的快捷键</li><li>对于不熟悉快捷键的用户很有必要安装</li><li>提示的快捷键是根据当前设置的keymap来的</li></ul></blockquote><h3 id="10-CodeGlance3"><a href="#10-CodeGlance3" class="headerlink" title="10.CodeGlance3"></a>10.CodeGlance3</h3><blockquote><ul><li>类似sublime的代码缩略图</li><li>在右边生成小地图，可以拖动快速定位区域</li></ul></blockquote><h3 id="11-Alibaba-Java-Coding-Guidelines"><a href="#11-Alibaba-Java-Coding-Guidelines" class="headerlink" title="11.Alibaba Java Coding Guidelines"></a>11.Alibaba Java Coding Guidelines</h3><blockquote><ul><li>阿里巴巴的Java规范</li><li>可以扫描当前项目或当前文件</li><li>可以实时监控并提示</li><li>想写好规范的Java代码，养成良好的代码风格请务必安装</li></ul></blockquote><h3 id="12-Codota"><a href="#12-Codota" class="headerlink" title="12.Codota"></a>12.Codota</h3><blockquote><ul><li>比IDEA更好的代码补全（针对Java和JavaScript）</li><li>可以在线搜索GitHub上的代码片段</li><li>也可以AI学习本地项目（看你是否同意授权上传本地代码）</li><li>官方正在大力推荐他们的新代码补全插件TabNine</li><li>TabNine支持更多编程语言，而且AI学习更强大，但是内存占用太大了</li><li>平时只写Java用Codota就够了</li></ul></blockquote><h3 id="13-Easy-Code"><a href="#13-Easy-Code" class="headerlink" title="13.Easy Code"></a>13.Easy Code</h3><blockquote><ul><li>基于IntelliJ IDEA开发的代码生成插件，支持自定义任意模板（Java，html，js，xml）。</li><li>只要是与数据库相关的代码都可以通过自定义模板来生成。支持数据库类型与java类型映射关系配置。</li><li>支持同时生成生成多张表的代码。每张表有独立的配置信息。完全的个性化定义，规则由你设置。  </li></ul><p><code>其实就是根据数据库生成controller、dao、entity、mapper、service等文件</code><br>界面如下：<br><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202112040434994.png" alt="Easy Code界面"></p></blockquote><h3 id="14-GsonFormatPlus"><a href="#14-GsonFormatPlus" class="headerlink" title="14.GsonFormatPlus"></a>14.GsonFormatPlus</h3><blockquote><ul><li>一个可以将json数据格式化的插件</li><li>格式化后可以直接生成Java成员变量</li><li>快捷键是Alt + S</li><li>平时可能不用但是关键时刻不能没有的插件</li><li>反正是离线版的小插件，长期开启也没影响</li></ul></blockquote><h3 id="15-Dracula-Theme"><a href="#15-Dracula-Theme" class="headerlink" title="15.Dracula Theme"></a>15.Dracula Theme</h3><blockquote><p>最后推荐个好看的主题，不会太亮也不会太暗，色彩很炫酷。<br>代码高亮的搭配也让人很容易集中注意力。<br>我在VSCode上也是用的这个主题。<br>实在用不习惯下载量最高的OneDark（太暗了！）<br><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202112040451806.png" alt="Dracula Theme在IDEA中的预览"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第3天</title>
      <link href="/posts/57198.html"/>
      <url>/posts/57198.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>按照学校要求，去参加为期6天的企业开发实训<br>课程包括鸿蒙开发和Java的spring boot + mybatis项目开发<br>好忙啊，暂时停更</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第2天</title>
      <link href="/posts/9071.html"/>
      <url>/posts/9071.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>Java的数据类型分为两大类：<strong>基本类型</strong>和<strong>引用类型</strong></p></blockquote><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><blockquote><p>基本类型分为两大类：<em><strong>数值类型</strong></em> 和 <em><strong>boolean类型</strong></em></p></blockquote><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><blockquote><p>数值类型分为三大类：<code>整数类型</code>、<code>浮点类型</code>和<code>字符类型</code></p></blockquote><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><ol><li>byte占一个字节 范围-128到127</li><li>short占2个字节 范围-32768到32767</li><li>int占4个字节 范围-2147483648到2147483647</li><li>long占8个字节 范围-9223372036854775808到9223372036854775807</li></ol><h5 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h5><ol><li>float占4个字节</li><li>double占8个字节</li></ol><h4 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h4><p>占一位，其值只有<code>true</code>和<code>false</code>两个</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ol><li>类</li><li>接口</li><li>数组</li></ol><hr><blockquote><p><em><strong>在Java中，String字符串不是基本类型</strong></em></p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量就是可以变化的量</li><li>Java是一种强类型语言，每个变量都必须声明其类型</li><li>Java变量是程序中最基本的储存单元，其要素包括变量名，变量类型和作用域</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">type varName [=value] [{,varName[=value]}];  //数据类型 变量名 = 值：可以使用逗号隔开来声明多个同类型变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意事项：</p><ul><li>每个变量都有类型，类型可以是基本型，也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</li></ul><h2 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h2><ul><li>位（bit）：是计算机内部数据储存的最小单位，11001100是一个八位二进制数</li><li>字节（byte）：是计算机中数据处理的基本单位，习惯上用大写B来表示</li><li>1B（byte，字节） = 8bit（位）</li><li>字符：是指计算机中使用的字母，数字，字和符号</li></ul><hr><ul><li>1bit表示1位</li><li>bByte表示一个字节 1B=8b</li><li>1024B=1KB</li><li>1024KB=1MB</li><li>1024MB=1GB</li></ul><h2 id="数据类型扩展"><a href="#数据类型扩展" class="headerlink" title="数据类型扩展"></a>数据类型扩展</h2><h3 id="整数拓展：进制"><a href="#整数拓展：进制" class="headerlink" title="整数拓展：进制"></a>整数拓展：进制</h3><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><p>Java中一般不使用二进制，但是可以以0b开头表示二进制数</p><h4 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h4><p>int i = 010;<br>输出8</p><h4 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h4><p>int i = 10;<br>输出10</p><h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><p>int i = 0x10;<br>输出16</p><h3 id="浮点数扩展"><a href="#浮点数扩展" class="headerlink" title="浮点数扩展"></a>浮点数扩展</h3><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><p>float f = 0.1f</p><h4 id="double"><a href="#double" class="headerlink" title="double"></a>double</h4><p>double d = 1.0/10<br><strong>不要使用浮点数进行比较</strong></p><h3 id="字符扩展"><a href="#字符扩展" class="headerlink" title="字符扩展"></a>字符扩展</h3><p>字符的本质还是数字<br>可以int强制类型转换<br>Unicode编码占2字节</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2<span class="token operator">=</span><span class="token string">'\u0061'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出97</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>\t 制表符<br>\n 换行符</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"hello，world"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出hello，world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="布尔值扩展"><a href="#布尔值扩展" class="headerlink" title="布尔值扩展"></a>布尔值扩展</h3><p>Boolean值只有true和false<br>用于条件判断<br>注意：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//选第二种，不要画蛇添足</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第1天</title>
      <link href="/posts/26479.html"/>
      <url>/posts/26479.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础01：注释"><a href="#Java基础01：注释" class="headerlink" title="Java基础01：注释"></a>Java基础01：注释</h2><p>注释不会被执行，给程序员看的，方便维护。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><blockquote><p>//单行注释</p></blockquote><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><blockquote><p>/*多行<br>注释*/</p></blockquote><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>JavaDoc</p><blockquote><p>/**<br>  *@description<br>  *@author<br>  */</p></blockquote><h2 id="Java基础02：标识符和关键字"><a href="#Java基础02：标识符和关键字" class="headerlink" title="Java基础02：标识符和关键字"></a>Java基础02：标识符和关键字</h2><p>详情看站内文章</p><p>&nbsp;<a href="https://limitlm.github.io/posts/48874.html">Java关键字</a></p><h3 id="标识符注意点"><a href="#标识符注意点" class="headerlink" title="标识符注意点"></a>标识符注意点</h3><ul><li>所有标识符应该以字母A-Z或a-z，美元符号$，或者下划线_开始</li><li>首字符之后可以是字母A-Z或a-z，美元符号$，或者下划线_或数字的任意字母组合</li><li><code>不能使用关键字作为变量名或方法名</code></li><li>标识符是大小写敏感的</li><li>合法标识符举例</li><li><blockquote><p>age、$salary、_value、_1_value</p></blockquote></li><li>非法标识符举例</li><li><blockquote><p>123abc、-salary、#abc</p></blockquote></li><li><code>可以使用中文命名，但是一般不建议这样做，也不建议用拼音，很low</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java关键字</title>
      <link href="/posts/48874.html"/>
      <url>/posts/48874.html</url>
      
        <content type="html"><![CDATA[<h3 id="详细了解关键字："><a href="#详细了解关键字：" class="headerlink" title="详细了解关键字："></a>详细了解关键字：</h3><h4 id="1-访问控制"><a href="#1-访问控制" class="headerlink" title="1.&nbsp;访问控制"></a>1.&nbsp;访问控制</h4><ol><li><p>private&nbsp;私有的<br>private&nbsp;关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。&nbsp;只能在声明&nbsp;private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。&nbsp;所有类成员的默认访问范围都是&nbsp;package&nbsp;访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p></li><li><p>protected&nbsp;受保护的<br>protected&nbsp;关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。可以在声明&nbsp;protected&nbsp;类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。所有类成员的默认访问范围都是&nbsp;package&nbsp;访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p></li><li><p>public&nbsp;公共的<br>public&nbsp;关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。&nbsp;可能只会在其他任何类或包中引用&nbsp;public&nbsp;类、方法或字段。所有类成员的默认访问范围都是&nbsp;package&nbsp;访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p></li></ol><h4 id="2-类、方法和变量修饰符"><a href="#2-类、方法和变量修饰符" class="headerlink" title="2.&nbsp;类、方法和变量修饰符"></a>2.&nbsp;类、方法和变量修饰符</h4><ol><li><p>abstract&nbsp;声明抽象<br>abstract关键字可以修改类或方法。abstract类可以扩展（增加子类），但不能直接实例化。abstract方法不在声明它的类中实现，但必须在某个子类中重写。采用&nbsp;abstract方法的类本来就是抽象类，并且必须声明为abstract。</p></li><li><p>class类<br>class&nbsp;关键字用来声明新的&nbsp;<a href="http://lib.csdn.net/base/17">Java</a>&nbsp;类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用&nbsp;new&nbsp;操作符将类的对象实例化，然后调用类的方法来访问类的功能。</p></li><li><p>extends&nbsp;继承、扩展<br>extends&nbsp;关键字用在&nbsp;class&nbsp;或&nbsp;interface&nbsp;声明中，用于指示所声明的类或接口是其名称后跟有&nbsp;extends&nbsp;关键字的类或接口的子类。子类继承父类的所有&nbsp;public&nbsp;和&nbsp;protected&nbsp;变量和方法。&nbsp;子类可以重写父类的任何非&nbsp;final&nbsp;方法。一个类只能扩展一个其他类。</p></li><li><p>final&nbsp;最终、不可改变<br>final&nbsp;关键字可以应用于类，以指示不能扩展该类（不能有子类）。final&nbsp;关键字可以应用于方法，以指示在子类中不能重写此方法。一个类不能同时是&nbsp;abstract&nbsp;又是&nbsp;final。abstract&nbsp;意味着必须扩展类，final&nbsp;意味着不能扩展类。一个方法不能同时是&nbsp;abstract&nbsp;又是&nbsp;final。abstract&nbsp;意味着必须重写方法，final&nbsp;意味着不能重写方法。</p></li><li><p>implements实现<br>implements&nbsp;关键字在&nbsp;class&nbsp;声明中使用，以指示所声明的类提供了在&nbsp;implements&nbsp;关键字后面的名称所指定的接口中所声明的所有方法的实现。类必须提供在接口中所声明的所有方法的实现。一个类可以实现多个接口。</p></li><li><p>interface&nbsp;接口<br>interface&nbsp;关键字用来声明新的&nbsp;Java&nbsp;接口，接口是方法的集合。<br>接口是&nbsp;Java&nbsp;语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。&nbsp;<br>实现了接口的任何类都必须提供在该接口中的所有方法的实现。一个类可以实现多个接口。</p></li><li><p>native&nbsp;本地<br>native&nbsp;关键字可以应用于方法，以指示该方法是用&nbsp;Java&nbsp;以外的语言实现的。</p></li><li><p>new&nbsp;新,创建<br>new&nbsp;关键字用于创建类的新实例。&nbsp;<br>new&nbsp;关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。&nbsp;<br>参数集合必须与类的构造方法的签名匹配。&nbsp;<br>=&nbsp;左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。</p></li><li><p>static&nbsp;静态<br>static&nbsp;关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。&nbsp;<br>通常，static&nbsp;关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。<br>static（内部）类可以被其他类实例化和引用（即使它是顶级类）。在上面的示例中，另一个类中的代码可以实例化&nbsp;MyStaticClass&nbsp;类，方法是用包含它的类名来限定其名称，如&nbsp;MyClass.MyStaticClass。&nbsp;<br>static&nbsp;字段（类的成员变量）在类的所有实例中只存在一次。&nbsp;<br>可以从类的外部调用&nbsp;static&nbsp;方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。<br>模式：public&nbsp;final&nbsp;static&nbsp;&lt;type&gt;&nbsp;varName&nbsp;=&nbsp;&lt;value&gt;;&nbsp;通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。在上面的示例中，另一个类可以用&nbsp;MyClass.MAX_OBJECTS&nbsp;形式来引用&nbsp;MAX_OBJECTS&nbsp;常量。</p></li><li><p>strictfp&nbsp;严格,精准<br>strictfp的意思是FP-strict，也就是说精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。<br>可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字</p></li><li><p>synchronized线程、同步<br>synchronized&nbsp;关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。&nbsp;<br>synchronized&nbsp;关键字可防止代码的关键代码段一次被多个线程执行。<br>如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。&nbsp;<br>如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。&nbsp;<br>如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。</p></li><li><p>transient&nbsp;短暂<br>transient&nbsp;关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。<br>当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。<br>Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。<br>transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。</p></li><li><p>volatile&nbsp;易失<br>volatile&nbsp;关键字用于表示可以被多个线程异步修改的成员变量。<br>注意：volatile&nbsp;关键字在许多&nbsp;Java&nbsp;虚拟机中都没有实现。&nbsp;volatile&nbsp;的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。<br>Java&nbsp;语言中的&nbsp;volatile&nbsp;变量可以被看作是一种&nbsp;“程度较轻的&nbsp;synchronized”；与&nbsp;synchronized&nbsp;块相比，volatile&nbsp;变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是&nbsp;synchronized&nbsp;的一部分。</p></li></ol><h4 id="3-程序控制语句"><a href="#3-程序控制语句" class="headerlink" title="3.&nbsp;程序控制语句"></a>3.&nbsp;程序控制语句</h4><ol><li><p>break&nbsp;跳出，中断<br>break&nbsp;关键字用于提前退出&nbsp;for、while&nbsp;或&nbsp;do&nbsp;循环，或者在&nbsp;switch&nbsp;语句中用来结束&nbsp;case&nbsp;块。&nbsp;<br>break&nbsp;总是退出最深层的&nbsp;while、for、do&nbsp;或&nbsp;switch&nbsp;语句。</p></li><li><p>continue&nbsp;继续<br>continue&nbsp;关键字用来跳转到&nbsp;for、while&nbsp;或&nbsp;do&nbsp;循环的下一个迭代。<br>continue&nbsp;总是跳到最深层&nbsp;while、for&nbsp;或&nbsp;do&nbsp;语句的下一个迭代。</p></li><li><p>return&nbsp;返回<br>return&nbsp;关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。&nbsp;<br>如果方法具有非&nbsp;void&nbsp;的返回类型，return&nbsp;语句必须具有相同或兼容类型的参数。&nbsp;<br>返回值两侧的括号是可选的。</p></li><li><p>do&nbsp;运行<br>do&nbsp;关键字用于指定一个在每次迭代结束时检查其条件的循环。&nbsp;<br>do&nbsp;循环体至少执行一次。&nbsp;<br>条件表达式后面必须有分号。</p></li><li><p>while&nbsp;循环<br>while&nbsp;关键字用于指定一个只要条件为真就会重复的循环。</p></li><li><p>if&nbsp;如果<br>if&nbsp;关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。&nbsp;<br>if&nbsp;语句可以有可选的&nbsp;else&nbsp;子句，该子句包含条件为&nbsp;false&nbsp;时将执行的代码。  &nbsp;<br>包含&nbsp;boolean&nbsp;操作数的表达式只能包含&nbsp;boolean&nbsp;操作数。</p></li><li><p>else&nbsp;否则<br>else&nbsp;关键字总是在&nbsp;if-else&nbsp;语句中与&nbsp;if&nbsp;关键字结合使用。else&nbsp;子句是可选的，如果&nbsp;if&nbsp;条件为&nbsp;false，则执行该子句。</p></li><li><p>for&nbsp;循环<br>for&nbsp;关键字用于指定一个在每次迭代结束前检查其条件的循环。&nbsp;<br>for&nbsp;语句的形式为&nbsp;for(initialize;&nbsp;condition;&nbsp;increment)&nbsp;<br>控件流进入&nbsp;for&nbsp;语句时，将执行一次&nbsp;initialize&nbsp;语句。&nbsp;<br>每次执行循环体之前将计算&nbsp;condition&nbsp;的结果。如果&nbsp;condition&nbsp;为&nbsp;true，则执行循环体。&nbsp;<br>每次执行循环体之后，在计算下一个迭代的&nbsp;condition&nbsp;之前，将执行&nbsp;increment&nbsp;语句。</p></li><li><p>instanceof&nbsp;实例<br>instanceof&nbsp;关键字用来确定对象所属的类。</p></li><li><p>switch&nbsp;观察<br>switch&nbsp;语句用于基于某个表达式选择执行多个代码块中的某一个。&nbsp;<br>switch&nbsp;条件的计算结果必须等于&nbsp;byte、char、short&nbsp;或&nbsp;int。&nbsp;<br>case&nbsp;块没有隐式结束点。break&nbsp;语句通常在每个&nbsp;case&nbsp;块末尾使用，用于退出&nbsp;switch&nbsp;语句。&nbsp;<br>如果没有&nbsp;break&nbsp;语句，执行流将进入所有后面的&nbsp;case&nbsp;和/或&nbsp;default&nbsp;块。</p></li><li><p>case&nbsp;返回观察里的结果<br>case&nbsp;用来标记&nbsp;switch&nbsp;语句中的每个分支。&nbsp;<br>case&nbsp;块没有隐式结束点。break&nbsp;语句通常在每个&nbsp;case&nbsp;块末尾使用，用于退出&nbsp;switch&nbsp;语句。&nbsp;<br>如果没有&nbsp;break&nbsp;语句，执行流将进入所有后面的&nbsp;case&nbsp;和/或&nbsp;default&nbsp;块。</p></li><li><p>default&nbsp;默认<br>default&nbsp;关键字用来标记&nbsp;switch&nbsp;语句中的默认分支。&nbsp;<br>default&nbsp;块没有隐式结束点。break&nbsp;语句通常在每个&nbsp;case&nbsp;或&nbsp;default&nbsp;块的末尾使用，以便在完成块时退出&nbsp;switch&nbsp;语句。&nbsp;<br>如果没有&nbsp;default&nbsp;语句，其参数与任何&nbsp;case&nbsp;块都不匹配的&nbsp;switch&nbsp;语句将不执行任何操作。</p></li></ol><h4 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4.&nbsp;错误处理"></a>4.&nbsp;错误处理</h4><ol><li><p>try&nbsp;捕获异常<br>try&nbsp;关键字用于包含可能引发异常的语句块。&nbsp;<br>每个&nbsp;try&nbsp;块都必须至少有一个&nbsp;catch&nbsp;或&nbsp;finally&nbsp;子句。&nbsp;<br>如果某个特定异常类未被任何&nbsp;catch&nbsp;子句处理，该异常将沿着调用栈递归地传播到下一个封闭&nbsp;try&nbsp;块。如果任何封闭&nbsp;try&nbsp;块都未捕获到异常，Java&nbsp;解释器将退出，并显示错误消息和堆栈跟踪信息。</p></li><li><p>catch&nbsp;处理异常<br>catch&nbsp;关键字用来在&nbsp;try-catch&nbsp;或&nbsp;try-catch-finally&nbsp;语句中定义异常处理块。&nbsp;<br>开始和结束标记&nbsp;{&nbsp;和&nbsp;}&nbsp;是&nbsp;catch&nbsp;子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。&nbsp;<br>每个&nbsp;try&nbsp;块都必须至少有一个&nbsp;catch&nbsp;或&nbsp;finally&nbsp;子句。&nbsp;<br>如果某个特定异常类未被任何&nbsp;catch&nbsp;子句处理，该异常将沿着调用栈递归地传播到下一个封闭&nbsp;try&nbsp;块。如果任何封闭&nbsp;try&nbsp;块都未捕获到异常，Java&nbsp;解释器将退出，并显示错误消息和堆栈跟踪信息。</p></li><li><p>throw&nbsp;抛出一个异常对象<br>throw&nbsp;关键字用于引发异常。&nbsp;<br>throw&nbsp;语句将&nbsp;java.lang.Throwable&nbsp;作为参数。Throwable&nbsp;在调用栈中向上传播，直到被适当的&nbsp;catch&nbsp;块捕获。&nbsp;<br>引发非&nbsp;RuntimeException&nbsp;异常的任何方法还必须在方法声明中使用&nbsp;throws&nbsp;修饰符来声明它引发的异常。</p></li><li><p>throws&nbsp;声明一个异常可能被抛出<br>throws&nbsp;关键字可以应用于方法，以便指出方法引发了特定类型的异常。&nbsp;<br>throws&nbsp;关键字将逗号分隔的&nbsp;java.lang.Throwables&nbsp;列表作为参数。&nbsp;<br>引发非&nbsp;RuntimeException&nbsp;异常的任何方法还必须在方法声明中使用&nbsp;throws&nbsp;修饰符来声明它引发的异常。&nbsp;<br>要在&nbsp;try-catch&nbsp;块中包含带&nbsp;throws&nbsp;子句的方法的调用，必须提供该方法的调用者。</p></li></ol><h4 id="5-包相关"><a href="#5-包相关" class="headerlink" title="5.&nbsp;包相关"></a>5.&nbsp;包相关</h4><ol><li><p>import&nbsp;引入<br>import&nbsp;关键字使一个包中的一个或所有类在当前&nbsp;Java&nbsp;源文件中可见。可以不使用完全限定的类名来引用导入的类。&nbsp;<br>当多个包包含同名的类时，许多&nbsp;Java&nbsp;程序员只使用特定的&nbsp;import&nbsp;语句（没有“*”）来避免不确定性。</p></li><li><p>package&nbsp;包<br>package&nbsp;关键字指定在&nbsp;Java&nbsp;源文件中声明的类所驻留的&nbsp;Java&nbsp;包。&nbsp;<br>package&nbsp;语句（如果出现）必须是&nbsp;Java&nbsp;源文件中的第一个非注释性文本。<br>例:java.lang.Object。&nbsp;<br>如果&nbsp;Java&nbsp;源文件不包含&nbsp;package&nbsp;语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。</p></li></ol><h4 id="6-基本类型"><a href="#6-基本类型" class="headerlink" title="6.&nbsp;基本类型"></a>6.&nbsp;基本类型</h4><ol><li><p>&nbsp;boolean&nbsp;布尔型<br>boolean&nbsp;是&nbsp;Java&nbsp;原始类型。boolean&nbsp;变量的值可以是&nbsp;true&nbsp;或&nbsp;false。<br>boolean&nbsp;变量只能以&nbsp;true&nbsp;或&nbsp;false&nbsp;作为值。boolean&nbsp;不能与数字类型相互转换。&nbsp;<br>包含&nbsp;boolean&nbsp;操作数的表达式只能包含&nbsp;boolean&nbsp;操作数。&nbsp;<br>Boolean&nbsp;类是&nbsp;boolean&nbsp;原始类型的包装对象类。</p></li><li><p>byte&nbsp;字节型<br>byte&nbsp;是&nbsp;Java&nbsp;原始类型。byte&nbsp;可存储在&nbsp;[-128,&nbsp;127]&nbsp;范围以内的整数值。&nbsp;<br>Byte&nbsp;类是&nbsp;byte&nbsp;原始类型的包装对象类。它定义代表此类型的值的范围的&nbsp;MIN_VALUE&nbsp;和&nbsp;MAX_VALUE&nbsp;常量。&nbsp;<br>Java&nbsp;中的所有整数值都是&nbsp;32&nbsp;位的&nbsp;int&nbsp;值，除非值后面有&nbsp;l&nbsp;或&nbsp;L（如&nbsp;235L），这表示该值应解释为&nbsp;long。</p></li><li><p>char&nbsp;字符型<br>char&nbsp;是&nbsp;Java&nbsp;原始类型。char&nbsp;变量可以存储一个&nbsp;Unicode&nbsp;字符。&nbsp;<br>可以使用下列&nbsp;char&nbsp;常量：\b -&nbsp;空格,&nbsp;\f -&nbsp;换页,&nbsp;\n -&nbsp;换行,&nbsp;\r -&nbsp;回车,&nbsp;\t -&nbsp;水平制表符,&nbsp;\‘ -&nbsp;单引号,&nbsp;\“ -&nbsp;双引号,&nbsp;\\ -&nbsp;反斜杠,&nbsp;\xxx -&nbsp;采用&nbsp;xxx&nbsp;编码的&nbsp;Latin-1&nbsp;字符。\x&nbsp;和&nbsp;\xx&nbsp;均为合法形式，但可能引起混淆。&nbsp;\uxxxx -&nbsp;采用十六进制编码&nbsp;xxxx&nbsp;的&nbsp;Unicode&nbsp;字符。&nbsp;<br>Character&nbsp;类包含一些可用来处理&nbsp;char&nbsp;变量的&nbsp;static&nbsp;方法，这些方法包括&nbsp;isDigit()、isLetter()、isWhitespace()&nbsp;和&nbsp;toUpperCase()。&nbsp;<br>char&nbsp;值没有符号。</p></li><li><p>double&nbsp;双精度<br>double&nbsp;是&nbsp;Java&nbsp;原始类型。double&nbsp;变量可以存储双精度浮点值。&nbsp;<br>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。&nbsp;<br>Java&nbsp;浮点数值可代表无穷大和&nbsp;NaN（非数值）。Double&nbsp;包装对象类用来定义常量&nbsp;MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY&nbsp;和&nbsp;NaN。</p></li><li><p>float&nbsp;浮点<br>float&nbsp;是&nbsp;Java&nbsp;原始类型。float&nbsp;变量可以存储单精度浮点值。&nbsp;<br>使用此关键字时应遵循下列规则：&nbsp;<br>Java&nbsp;中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上&nbsp;f&nbsp;或&nbsp;F，如&nbsp;0.01f。&nbsp;<br>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。&nbsp;<br>Java&nbsp;浮点数值可代表无穷大和&nbsp;NaN（非数值）。Float&nbsp;包装对象类用来定义常量&nbsp;MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY&nbsp;和&nbsp;NaN。</p></li><li><p>int&nbsp;整型<br>int&nbsp;是&nbsp;Java&nbsp;原始类型。int&nbsp;变量可以存储&nbsp;32&nbsp;位的整数值。&nbsp;<br>Integer&nbsp;类是&nbsp;int&nbsp;原始类型的包装对象类。它定义代表此类型的值的范围的&nbsp;MIN_VALUE&nbsp;和&nbsp;MAX_VALUE&nbsp;常量。&nbsp;<br>Java&nbsp;中的所有整数值都是&nbsp;32&nbsp;位的&nbsp;int&nbsp;值，除非值后面有&nbsp;l&nbsp;或&nbsp;L（如&nbsp;235L），这表示该值应解释为&nbsp;long。</p></li><li><p>&nbsp;long&nbsp;长整型<br>long&nbsp;是&nbsp;Java&nbsp;原始类型。long&nbsp;变量可以存储&nbsp;64&nbsp;位的带符号整数。&nbsp;<br>Long&nbsp;类是&nbsp;long&nbsp;原始类型的包装对象类。它定义代表此类型的值的范围的&nbsp;MIN_VALUE&nbsp;和&nbsp;MAX_VALUE&nbsp;常量。&nbsp;<br>Java&nbsp;中的所有整数值都是&nbsp;32&nbsp;位的&nbsp;int&nbsp;值，除非值后面有&nbsp;l&nbsp;或&nbsp;L（如&nbsp;235L），这表示该值应解释为&nbsp;long。</p></li><li><p>short&nbsp;短整型<br>short&nbsp;是&nbsp;Java&nbsp;原始类型。short&nbsp;变量可以存储&nbsp;16&nbsp;位带符号的整数。&nbsp;<br>Short&nbsp;类是&nbsp;short&nbsp;原始类型的包装对象类。它定义代表此类型的值的范围的&nbsp;MIN_VALUE&nbsp;和&nbsp;MAX_VALUE&nbsp;常量。&nbsp;<br>Java&nbsp;中的所有整数值都是&nbsp;32&nbsp;位的&nbsp;int&nbsp;值，除非值后面有&nbsp;l&nbsp;或&nbsp;L（如&nbsp;235L），这表示该值应解释为&nbsp;long。</p></li></ol><h4 id="7-变量引用"><a href="#7-变量引用" class="headerlink" title="7.&nbsp;变量引用"></a>7.&nbsp;变量引用</h4><ol><li><p>super&nbsp;父类,超类<br>super&nbsp;关键字用于引用使用该关键字的类的超类。&nbsp;<br>作为独立语句出现的&nbsp;super&nbsp;表示调用超类的构造方法。&nbsp;<br>super.&lt;methodName&gt;()&nbsp;表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。</p></li><li><p>&nbsp;this&nbsp;本类<br>this&nbsp;关键字用于引用当前实例。&nbsp;<br>当引用可能不明确时，可以使用&nbsp;this&nbsp;关键字来引用当前的实例。</p></li><li><p>void&nbsp;无返回值<br>void&nbsp;关键字表示&nbsp;null&nbsp;类型。&nbsp;<br>void&nbsp;可以用作方法的返回类型，以指示该方法不返回值。</p></li></ol><h4 id="8-保留字"><a href="#8-保留字" class="headerlink" title="8.&nbsp;保留字"></a>8.&nbsp;保留字</h4><p>正确识别java语言的关键字（keyword）和保留字（reserved&nbsp;word）是十分重要的。Java的关键字对java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等。保留字是为java预留的关键字，他们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。</p><p>识别java语言的关键字，不要和其他语言如c/c++的关键字混淆。&nbsp;<br>const和goto是java的保留字。&nbsp;所有的关键字都是小写&nbsp;</p><ol><li><p>goto&nbsp;跳转<br>goto&nbsp;保留关键字，但无任何作用。结构化程序设计完全不需要&nbsp;goto&nbsp;语句即可完成各种流程，而&nbsp;goto&nbsp;语句的使用往往会使程序的可读性降低，所以&nbsp;Java&nbsp;不允许&nbsp;goto&nbsp;跳转。</p></li><li><p>const&nbsp;静态<br>const&nbsp;保留字，是一个类型修饰符，使用const声明的对象不能更新。与final某些类似。</p></li><li><p>native&nbsp;本地<br>Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。&nbsp;<br>　　可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤：&nbsp;<br>　　１、在Java中声明native()方法，然后编译；&nbsp;<br>　　２、用javah产生一个.h文件；&nbsp;<br>　　３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）；&nbsp;<br>　　４、将第三步的.cpp文件编译成动态链接库文件；&nbsp;<br>　　５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的准备工作</title>
      <link href="/posts/64268.html"/>
      <url>/posts/64268.html</url>
      
        <content type="html"><![CDATA[<p>大学没有ssm框架的课程，找工作必须要会这个，那我自学。</p><p>从最基础的开始，就当复习了。</p><p>视频教程看b站狂神说，动力节点，尚硅谷，黑马的。</p><h1 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h1><h2 id="1-1从eclipse到idea"><a href="#1-1从eclipse到idea" class="headerlink" title="1.1从eclipse到idea"></a>1.1从eclipse到idea</h2><p>idea确实比eclipse先进，按照教学选择用idea</p><h3 id="1-1-1安装idea"><a href="#1-1-1安装idea" class="headerlink" title="1.1.1安装idea"></a>1.1.1安装idea</h3><p>去官网下载idea的最新版，不要下载社区版，后续社区版不能用spring</p><h3 id="1-1-2安装无限试用插件"><a href="#1-1-2安装无限试用插件" class="headerlink" title="1.1.2安装无限试用插件"></a>1.1.2安装无限试用插件</h3><p>学生优惠只有一年，还是太贵了，现在也只是个人学习使用，等以后工作用上的时候再补票入正吧。</p><h2 id="1-2安装Java环境"><a href="#1-2安装Java环境" class="headerlink" title="1.2安装Java环境"></a>1.2安装Java环境</h2><p>大一就安装好了</p><h3 id="1-2-1安装jdk"><a href="#1-2-1安装jdk" class="headerlink" title="1.2.1安装jdk"></a>1.2.1安装jdk</h3><p>在官网下载的jdk13</p><h3 id="1-2-2测试是否安装成功"><a href="#1-2-2测试是否安装成功" class="headerlink" title="1.2.2测试是否安装成功"></a>1.2.2测试是否安装成功</h3><p>win+R运行cmd</p><p>输入java -version查看</p><p><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202111161659540.png" alt="安装成功"></p><h1 id="2开始编程"><a href="#2开始编程" class="headerlink" title="2开始编程"></a>2开始编程</h1><h2 id="2-1写个hello-world吧"><a href="#2-1写个hello-world吧" class="headerlink" title="2.1写个hello world吧"></a>2.1写个hello world吧</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Java入门到入土正式开始了</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章 Front-matter 介绍</title>
      <link href="/posts/64974.html"/>
      <url>/posts/64974.html</url>
      
        <content type="html"><![CDATA[<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/posts/47193.html"/>
      <url>/posts/47193.html</url>
      
        <content type="html"><![CDATA[<h1 id="markdown基础教程"><a href="#markdown基础教程" class="headerlink" title="markdown基础教程"></a>markdown基础教程</h1><p>三分钟掌握markdown基本用法</p><hr><h2 id="需要特别注意的点"><a href="#需要特别注意的点" class="headerlink" title="需要特别注意的点"></a>需要特别注意的点</h2><ol><li>通常，格式控制符与文本内容需要 <strong>保留一个空格</strong>  </li><li>段落之间需要<strong>空格一行</strong></li><li>在VSCode上编辑，同一行内按回车是不能换行的，在末尾加<strong>两个空格</strong>表示换行<h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5></li></ol><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p># 一级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>## 二级标题</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><hr><p>### 三级标题</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><hr><p>#### 四级标题</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><hr><p>##### 五级标题</p><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><hr><p>###### 六级标题</p><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表分为无序列表和有序列表，无序列表在文本前加上+，-，*即可：</p><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><p>而有序列表仅需要在文本前面加上1.即可（记得加上空格，换行会自动补全序号）：</p><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><h2 id="段落分隔符"><a href="#段落分隔符" class="headerlink" title="段落分隔符"></a>段落分隔符</h2><p>通过—或者***或者___即可添加段落分割线</p><hr><hr><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>表示引用的内容。仅需要在文本前面加上&gt;即可（不加空格也行）：</p><blockquote><p>引用的内容</p></blockquote><p>可以加多个&gt;表示多级引用</p><blockquote><p>一级</p><blockquote><p>二级</p><blockquote><p>三级</p></blockquote></blockquote></blockquote><h2 id="文字修饰"><a href="#文字修饰" class="headerlink" title="文字修饰"></a>文字修饰</h2><p>*或_用来 修饰 <em>斜体</em><br>**或__用来 修饰 <strong>粗体</strong><br>***或者___用来修饰 <em><strong>斜粗体</strong></em><br>~~ 用来修饰 <del>删减体</del><br>用html语法的 &lt;u&gt;文本内容&lt;/u&gt; 来修饰 <u>下划线</u></p><h2 id="字体相关"><a href="#字体相关" class="headerlink" title="字体相关"></a>字体相关</h2><p>通过html语法来改变字体属性，如字体大小、颜色<br>&lt;font face=”黑体”&gt;我是黑体字<br>&lt;font face=”微软雅黑”&gt;我是微软雅黑<br>&lt;font face=”STCAIYUN”&gt;我是华文彩云<br>&lt;font color=#0099ff size=12 face=”黑体”&gt;黑体<br>&lt;font color=gray size=5&gt;gray<br>&lt;font color=#00ffff size=3&gt;null  </p><hr><p>效果如下</p><hr><p><font face="黑体">我是黑体字</font></p><p><font face="微软雅黑">我是微软雅黑</font></p><p><font face="STCAIYUN">我是华文彩云</font></p><p><font color="#0099ff" size="12" face="黑体">黑体</font></p><p><font color="gray" size="5">gray</font></p><p><font color="#00ffff" size="3">null</font></p><h2 id="链接及图片"><a href="#链接及图片" class="headerlink" title="链接及图片"></a>链接及图片</h2><p>通过[描述](地址)来添加链接<br><a href="https://limitlm.github.io/">欢迎访问我的博客</a></p><p>而在前面加一个!即为添加图片，其中在链接后加”内容”表示鼠标悬停时显示的信息<br><img src="https://github.com/limitlm.png" alt="我的github头像" title="鼠标悬停描述"></p><p>如果是用Hexo，它有特殊处理，可以直接使用img标签<br>&lt;img src=”” width=”50%” height=”50%”&gt;<br>可以添加样式，比如改变图片显示大小</p><img src="https://github.com/limitlm.png" width="50%" height="50%"><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>|姓名|性别|年龄|<br>|:-:|:–|–:|<br>|我|男|22|<br>|你| | |  </p><p>效果如下，第二行表示内容对齐格式，第一格表示内容居中，第二个表示居左，第三个表示居右。</p><table><thead><tr><th align="center">姓名</th><th align="left">性别</th><th align="right">年龄</th></tr></thead><tbody><tr><td align="center">我</td><td align="left">男</td><td align="right">22</td></tr><tr><td align="center">你</td><td align="left"></td><td align="right"></td></tr></tbody></table><h2 id="段落代码块"><a href="#段落代码块" class="headerlink" title="段落代码块"></a>段落代码块</h2><p>每行缩进4个空格或 1个 Tab表示  </p><pre><code>第一行第二行第三行</code></pre><h2 id="插入高亮代码"><a href="#插入高亮代码" class="headerlink" title="插入高亮代码"></a>插入高亮代码</h2><p>行内用`内容`表示 <code>高亮</code>  </p><p>代码块用```内容```，后面加java或python等表示语法高亮<br>首字母要小写！！！<br>访问<a href="https://prismjs.com/#supported-languages" title="因为Java首字母大写了以为高亮失效排查了大半天">prismjs官网</a>查看支持高亮的语言及写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>跟链接的语法一样，只是变成了页内锚点（也许不支持中文）<br>[回到顶部](#test)<br><a href="#test">回到顶部</a></p><pre><code>只能跳转一级标题，五级标题，六级标题。具体原因暂时未知</code></pre><h2 id="GitHub的emoji表情"><a href="#GitHub的emoji表情" class="headerlink" title="GitHub的emoji表情"></a>GitHub的emoji表情</h2><p><span class="github-emoji"><span>😊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>具体每一个表情的符号码，可以查询 GitHub 的<a href="http://www.emoji-cheat-sheet.com/">官方网页</a></p><h2 id="其他待补充"><a href="#其他待补充" class="headerlink" title="其他待补充"></a>其他待补充</h2><p>如高阶语法，数学公式，流程图等</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Hexo GitHub 从零开始搭建个人博客</title>
      <link href="/posts/21301.html"/>
      <url>/posts/21301.html</url>
      
        <content type="html"><![CDATA[<h2 id="输密码才能看"><a href="#输密码才能看" class="headerlink" title="输密码才能看"></a>输密码才能看</h2>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
