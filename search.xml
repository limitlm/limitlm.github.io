<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用API——StringBuilder、Math、System、BigDecimal</title>
      <link href="/posts/44906.html"/>
      <url>/posts/44906.html</url>
      
        <content type="html"><![CDATA[<h2 id="StringBuilder概述"><a href="#StringBuilder概述" class="headerlink" title="StringBuilder概述"></a>StringBuilder概述</h2><ul><li>StringBuilder是一个可变的字符串类，我们可以把它看成是一个对象容器。</li><li>作用：提高字符串的操作效率，如拼接、修改等。</li></ul><p>StringBuilder 构造器</p><blockquote><p>public StringBuilder()</p><blockquote><p>创建一个空白的可变的字符串对象，不包含任何内容</p></blockquote><p>public StringBuilder(String str)</p><blockquote><p>创建一个指定字符串内容的可变字符串对象</p></blockquote></blockquote><h3 id="StringBuilder常用方法"><a href="#StringBuilder常用方法" class="headerlink" title="StringBuilder常用方法"></a>StringBuilder常用方法</h3><table><thead><tr><th align="left">方法名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public StringBuitsler append(任意类型)</td><td align="left">添加数据并返回StringBuilder对象本身</td></tr><tr><td align="left">public StringBuilder reverse()</td><td align="left">将对象的内容反转</td></tr><tr><td align="left">public int length()</td><td align="left">返回对象内容长度</td></tr><tr><td align="left">public String toString()</td><td align="left">通过toString()就可以实现把StringBuilder转换为String</td></tr></tbody></table><h3 id="为什么拼接、反转字符串建议使用StringBuilder"><a href="#为什么拼接、反转字符串建议使用StringBuilder" class="headerlink" title="为什么拼接、反转字符串建议使用StringBuilder"></a>为什么拼接、反转字符串建议使用StringBuilder</h3><ul><li>String ：内容是不可变的、拼接字符串性能差。</li><li>StringBuilder：内容是可变的、拼接字符串性能好、代码优雅。</li><li>定义字符串使用String</li><li>拼接、修改等操作字符串使用StringBuilder</li></ul><h3 id="案例：打印整数数组"><a href="#案例：打印整数数组" class="headerlink" title="案例：打印整数数组"></a>案例：打印整数数组</h3><p>需求：</p><p>设计一个方法用于输出任意整型数组的内容，要求输出成如下格式:<br>“该数组内容为：[11，22，33，44，55]”</p><p>分析：</p><ol><li>定义一个方法，要求该方法能够接收数组，并输出数组内容。</li></ol><p>—&gt; 需要参数吗？需要返回值类型申明吗？<br>2. 定义一个静态初始化的数组，调用该方法，并传入该数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><ul><li>包含执行基本数字运算的方法，Math类没有提供公开的构造器。</li><li>如何使用类中的成员呢？看类的成员是否都是静态的，如果是，通过类名就可以直接调用</li></ul><h3 id="Math类的常用方法"><a href="#Math类的常用方法" class="headerlink" title="Math类的常用方法"></a>Math类的常用方法</h3><table><thead><tr><th align="left">方法名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public static int abs(int a)</td><td align="left">获取参数绝对值</td></tr><tr><td align="left">public static double ceil(double a)</td><td align="left">向上取整</td></tr><tr><td align="left">public static double floor(double a)</td><td align="left">向下取整</td></tr><tr><td align="left">public static int round(float a)</td><td align="left">四舍五入</td></tr><tr><td align="left">public static int max(int a,int b)</td><td align="left">获取两个int值中的较大值</td></tr><tr><td align="left">public static double pow(double a,double b)</td><td align="left">返回a的b次幂的值</td></tr><tr><td align="left">public static double random()</td><td align="left">返回值为double的随机值，范围[0.0,1.0)</td></tr></tbody></table><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p>System 类概述</p><ul><li>System的功能是通用的，都是直接用类名调用即可，所以System不能被实例化。</li></ul><h3 id="System类的常用方法"><a href="#System类的常用方法" class="headerlink" title="System类的常用方法"></a>System类的常用方法</h3><table><thead><tr><th align="left">方法名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public static void exit(int status)</td><td align="left">终止当前运行的Java 虚拟机，非零表示异常终止</td></tr><tr><td align="left">public static long currentTimeMillis()</td><td align="left">返回当前系统的时间毫秒值形式</td></tr><tr><td align="left">public static void arraycopy(数据源数组,起始索引,目的地数组,起始索引,拷贝个数)</td><td align="left">数组拷贝</td></tr></tbody></table><h3 id="时间毫秒值"><a href="#时间毫秒值" class="headerlink" title="时间毫秒值"></a>时间毫秒值</h3><p>计算机认为时间是有起点的，起始时间： 1970年1月1日 00:00:00</p><p>时间毫秒值：指的是从1970年1月1日00:00:00走到此刻的总的毫秒数，应该是很大的。1s = 1000ms。</p><p>原因：1970年1月1日算C语言的生日</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1642740834486</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h2><p>BigDecimal作用</p><ul><li>用于解决浮点型运算精度失真的问题</li></ul><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul><li>创建对象BigDecimal封装浮点型数据（最好的方式是调用方法）</li></ul><blockquote><p>public static BigDecimal valueOf(double val); 包装浮点数成为BigDecimal对象。</p></blockquote><h3 id="BigDecima常用API"><a href="#BigDecima常用API" class="headerlink" title="BigDecima常用API"></a>BigDecima常用API</h3><table><thead><tr><th align="left">方法名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public BigDecimal add(BigDecimal b)</td><td align="left">加法</td></tr><tr><td align="left">public BigDecimal subtract(BigDecimal b)</td><td align="left">减法</td></tr><tr><td align="left">public BigDecimal multiply(BigDecimal b)</td><td align="left">乘法</td></tr><tr><td align="left">public BigDecimal divide(BigDecimal b)</td><td align="left">除法</td></tr><tr><td align="left">public BigDecimal divide (另一个BigDecimal对象，精确几位，舍入模式)</td><td align="left">除法</td></tr></tbody></table><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>正例：优先推荐入参为String的构造方法，或使用BigDecimal的valueOf方法，此方法内部其实执行了Double 的 toString，而Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> recommend1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token class-name">BigDecimal</span> recommend2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用API——Object和Objects</title>
      <link href="/posts/63919.html"/>
      <url>/posts/63919.html</url>
      
        <content type="html"><![CDATA[<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object类的作用：</p><ul><li>一个类要么默认继承了Object类，要么间接继承了Object类，Object类是Java中的祖宗类。</li><li>Object类的方法是一切子类都可以直接使用的，所以我们要学习Object类的方法。</li></ul><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><blockquote><p>返回String类型<br>默认是返回当前对象在堆内存中的地址信息:类的全限名@内存地址</p></blockquote><p>toString存在的意义</p><ul><li>父类toString()方法存在的意义就是为了被子类重写，以便返回对象的内容信息，而不是地址信息！！</li></ul><hr><p>重写toString方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ………<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接用IDEA快捷键生成</p><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><blockquote><p>返回Boolean类型<br>默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false</p></blockquote><p>需要比较对象内容时<br>重写equals方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 1、判断足否是同一个对象比较，如果是返回true。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 2、如果o是null返回false，如果o不是同类型页返回false</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//强制类型转换，把o从Object转为比较类型</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">==</span>student<span class="token punctuation">.</span>sex <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">==</span>student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h2><p>Objects类与Object还是继承关系，Objects类是从JDK 1.7开始之后才有的。</p><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals 方法"></a>equals 方法</h3><p>Objects的equals方法比较的结果是一样的,但是更安全。</p><blockquote><p>普通的equals方法，如果某个对象的值是Null，写代码时不会报错，运行起来会有空指针错误，会留下隐患</p><p>Objects.equals方法比较两个对象的，底层会先进行非空判断，从而可以避免空指针异常。再进行equals比较</p></blockquote><h3 id="isNull方法"><a href="#isNull方法" class="headerlink" title="isNull方法"></a>isNull方法</h3><blockquote><p>判断变量是否为null ,为null返回true,反之返回false</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类和匿名内部类</title>
      <link href="/posts/30357.html"/>
      <url>/posts/30357.html</url>
      
        <content type="html"><![CDATA[<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类就是定义在一个类里面的类，里面的类可以理解成（寄生），外部类可以理解成（宿主）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token comment">// 内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Heart</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部类的使用场景、作用</p><ul><li>当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构可以选择使用内部类来设计。</li><li>内部类通常可以方便访问外部类的成员，包括私有的成员。</li><li>内部类提供了更好的封装性，内部类本身就可以用private protectecd等修饰，封装性可以做更多控制。</li></ul><h3 id="静态内部类（了解即可）"><a href="#静态内部类（了解即可）" class="headerlink" title="静态内部类（了解即可）"></a>静态内部类（了解即可）</h3><h4 id="什么是静态内部类？"><a href="#什么是静态内部类？" class="headerlink" title="什么是静态内部类？"></a>什么是静态内部类？</h4><ul><li>有static修饰，属于外部类本身。</li><li>它的特点和使用与普通类是完全一样的，类有的成分它都有，只是位置在别人里面而已。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>    <span class="token comment">//静态成员内部类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态内部类创建对象的格式"><a href="#静态内部类创建对象的格式" class="headerlink" title="静态内部类创建对象的格式"></a>静态内部类创建对象的格式</h4><p>格式：外部类名.内部类名 对象名 = new 外部类名.内部类构造器;</p><p>范例:Outer.Inner in = new Outer.Inner();</p><h4 id="静态内部类的访问拓展"><a href="#静态内部类的访问拓展" class="headerlink" title="静态内部类的访问拓展"></a>静态内部类的访问拓展</h4><ol><li>静态内部类中是否可以直接访问外部类的静态成员？<br>可以，外部类的静态成员只有一份可以被共享访问。</li><li>静态内部类中是否可以直接访问外部类的实例成员？<br>不可以的，外部类的实例成员必须用外部类对象访问。</li></ol><h4 id="静态内部类的使用场景、特点、访问总结"><a href="#静态内部类的使用场景、特点、访问总结" class="headerlink" title="静态内部类的使用场景、特点、访问总结"></a>静态内部类的使用场景、特点、访问总结</h4><ul><li>如果一个类中包含了一个完整的成分，如汽车类中的发动机类。</li><li>特点、使用与普通类是一样的，类有的成分它都有，只是位置在别人里面而已。</li><li>可以直接访问外部类的静态成员，不能直接访问外部类的实例成员。</li><li>注意：开发中实际用的还是比较少。</li></ul><h3 id="成员内部类（了解即可）"><a href="#成员内部类（了解即可）" class="headerlink" title="成员内部类（了解即可）"></a>成员内部类（了解即可）</h3><h4 id="什么是成员内部类？"><a href="#什么是成员内部类？" class="headerlink" title="什么是成员内部类？"></a>什么是成员内部类？</h4><ul><li>无static修饰，属于外部类的对象。</li><li>JDK16之前，成员内部类中不能定义静态成员，JDK 16开始也可以定义静态成员了。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>    <span class="token comment">// 成员内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="成员内部类创建对象的格式"><a href="#成员内部类创建对象的格式" class="headerlink" title="成员内部类创建对象的格式"></a>成员内部类创建对象的格式</h4><p>格式：外部类名.内部类名 对象名 = new 外部类构造器.new内部类构造器();<br>范例:Outer.Inner in = new Outer().new Inner();</p><h4 id="成员内部类的访问拓展"><a href="#成员内部类的访问拓展" class="headerlink" title="成员内部类的访问拓展"></a>成员内部类的访问拓展</h4><ol><li>成员内部类中是否可以直接访问外部类的静态成员？<br>可以，外部类的静态成员只有一份可以被共享访问。</li><li>成员内部类的实例方法中是否可以直接访问外部类的实例成员？<br>可以的，因为必须先有外部类对象，才能有成员内部类对象，所以可以直接访问外部类对象的实例成员。</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>成员内部类是什么样的、有什么特点？</p><ul><li>无static修饰，属于外部类的对象。</li><li>可以直接访问外部类的静态成员，实例方法中可以直接访问外部类的实例成员。</li></ul><p>成员内部类如何创建对象？</p><ul><li>外部类名.内部类名对象名= new 外部类构造器.new 内部类构造器();</li></ul><p><em><strong>注意：在成员内部类中访问所在外部类对象，格式：<code>外部类名.this.成员</code></strong></em></p><h3 id="局部内部类（鸡肋语法，了解即可）"><a href="#局部内部类（鸡肋语法，了解即可）" class="headerlink" title="局部内部类（鸡肋语法，了解即可）"></a>局部内部类（鸡肋语法，了解即可）</h3><ul><li>局部内部类放在方法、代码块、构造器等执行体中。</li><li>局部内部类的类文件名为： 外部类$N内部类.class。</li></ul><h3 id="匿名内部类（重点）"><a href="#匿名内部类（重点）" class="headerlink" title="匿名内部类（重点）"></a>匿名内部类（重点）</h3><ul><li>本质上是一个没有名字的局部内部类，定义在方法中、代码块中、等。</li><li>作用：方便创建子类对象，最终目的为了简化代码编写。</li></ul><p>格式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 类<span class="token operator">|</span>抽象类名<span class="token operator">|</span>或者接口名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    重写方法<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>特点总结：</p><ul><li>匿名内部类是一个没有名字的内部类。</li><li>匿名内部类写出来就会产生一个匿名内部类的对象。</li><li>匿名内部类的对象类型相当于是当前new的那个的类型的子类类型。</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//为按钮绑定点击事件监听器。</span>btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printin</span><span class="token punctuation">(</span><span class="token string">"登录一下~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//btn.addActionListener(e -&gt; System.out.printin（"登录一下"));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后续衔接lambda表达式，实现代码简化。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个多态案例</title>
      <link href="/posts/1044.html"/>
      <url>/posts/1044.html</url>
      
        <content type="html"><![CDATA[<p>需求：</p><p>使用面向对象编程模拟：设计一个电脑对象，可以安装2个USB设备</p><ul><li>鼠标：被安装时可以完成接入、调用点击功能、拔出功能。</li><li>键盘：被安装时可以完成接入、调用打字功能、拔出功能。</li></ul><p>分析</p><ol><li>定义一个USB的接口（申明USB设备的规范必须是：可以接入和拔出）</li><li>提供2个USB实现类代表鼠标和键盘，让其实现USB接口，并分别定义独有功能。</li><li>创建电脑对象，创建2个USB实现类对象，分别安装到电脑中并触发功能的执行。</li></ol><h3 id="创建USB接口"><a href="#创建USB接口" class="headerlink" title="创建USB接口"></a>创建USB接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> USB <span class="token punctuation">{</span>    <span class="token comment">/**     * 接入     */</span>    <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 拔出     */</span>    <span class="token keyword">void</span> <span class="token function">unconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建键盘类"><a href="#创建键盘类" class="headerlink" title="创建键盘类"></a>创建键盘类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Keyboard</span> <span class="token keyword">implements</span> USB <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"接入电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"从电脑拔出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"敲键盘了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建鼠标类"><a href="#创建鼠标类" class="headerlink" title="创建鼠标类"></a>创建鼠标类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">implements</span> USB <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Mouse</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"接入电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"从电脑拔出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dbClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"双击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建电脑类"><a href="#创建电脑类" class="headerlink" title="创建电脑类"></a>创建电脑类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">installUSB</span><span class="token punctuation">(</span><span class="token class-name">USB</span> usb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//usb可能是键盘也可能是鼠标，这里使用多态</span>        usb<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//独有功能先判断再强转</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>usb <span class="token keyword">instanceof</span> <span class="token class-name">Keyboard</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Keyboard</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Keyboard</span><span class="token punctuation">)</span> usb<span class="token punctuation">;</span>            k<span class="token punctuation">.</span><span class="token function">keyDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>usb <span class="token keyword">instanceof</span> <span class="token class-name">Mouse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Mouse</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Mouse</span><span class="token punctuation">)</span> usb<span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">dbClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        usb<span class="token punctuation">.</span><span class="token function">unconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建电脑对象</span>        <span class="token class-name">Computer</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">"外星人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建usb设备</span>        <span class="token class-name">USB</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token string">"机械键盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">installUSB</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">USB</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mouse</span><span class="token punctuation">(</span><span class="token string">"机械鼠标"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">installUSB</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic@main/img/1642072822.png" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口、多态</title>
      <link href="/posts/63176.html"/>
      <url>/posts/63176.html</url>
      
        <content type="html"><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>interface</p><ul><li>接口中的成员只有常量和抽象方法。</li><li>在接口中，常量的修饰符public static final可以省略；抽象方法的修饰符public abstract可以省略。</li><li>因为接口是公开的规范，里面的内容都默认是公开的。  </li><li>接口不能创建对象。</li></ul><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><ul><li>接口是用来被类实现（implements）的，实现接口的类称为实现类。实现类可以理解成所谓的子类。</li><li>接口可以被类单实现，也可以被多实现。</li><li>一个类实现接口，必须重写完全部接口的全部抽象方法，否则这个类需要定义成抽象类。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>新版本允许接口带有方法体的方法</p><ul><li>默认方法：必须用default修饰-实现类对象调用</li><li>静态方法：必须用static修饰-必须用当前接口名调用</li><li>私有方法：用private修饰，只能被接口内部方法访问</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统知识点梳理</title>
      <link href="/posts/11178.html"/>
      <url>/posts/11178.html</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="操作系统的定义"><a href="#操作系统的定义" class="headerlink" title="操作系统的定义"></a>操作系统的定义</h3><blockquote><p>操作系统是计算机系统中的一个系统软件，他管理和控制计算机系统中的硬件及软件资源，在计算机与其用户之间起到接口的作用。</p></blockquote><h3 id="操作系统的基本类型"><a href="#操作系统的基本类型" class="headerlink" title="操作系统的基本类型"></a>操作系统的基本类型</h3><ol><li>批处理操作系统</li><li>分时系统</li><li>实时系统</li><li>通用操作系统</li><li>个人计算机操作系统</li><li>网络操作系统</li><li>分布式操作系统</li></ol><h3 id="操作系统功能"><a href="#操作系统功能" class="headerlink" title="操作系统功能"></a>操作系统功能</h3><ol><li>处理机管理</li><li>存储管理</li><li>设备管理</li><li>信息管理</li><li>用户接口</li></ol><h3 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h3><ol><li>并发性</li><li>共享性</li><li>随机性</li><li>虚拟</li><li>异步性</li></ol><h2 id="操作系统用户界面"><a href="#操作系统用户界面" class="headerlink" title="操作系统用户界面"></a>操作系统用户界面</h2><h3 id="作业的定义"><a href="#作业的定义" class="headerlink" title="作业的定义"></a>作业的定义</h3><blockquote><p>它由程序、数据和作业说明书组成，系统通过作业说明书控制文件形式的程序和数据，使之执行和操作。</p></blockquote><h3 id="一般用户的输入输出方式"><a href="#一般用户的输入输出方式" class="headerlink" title="一般用户的输入输出方式"></a>一般用户的输入输出方式</h3><ol><li>联机输入输出方式</li><li>脱机输入输出方式</li><li>直接耦合方式</li><li>spooling系统</li><li>网络联机方式</li></ol><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程的定义和特征"><a href="#进程的定义和特征" class="headerlink" title="进程的定义和特征"></a>进程的定义和特征</h3><blockquote><p>定义：并发执行的程序在执行过程中分配和管理资源的基本单位。<br>特征（与程序的区别）：进程是一个动态概念；进程具有并发特征；进程是竞争计算机系统资源的基本单位；不同的进程可以包含同一程序，只要该程序所对应的数据采集不同。</p></blockquote><h3 id="进程状态及其转换"><a href="#进程状态及其转换" class="headerlink" title="进程状态及其转换"></a>进程状态及其转换</h3><p><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202112211029401.png" alt="进程状态转换图"></p><h3 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h3><p>进程组成：程序、数据、PCB</p><blockquote><p>PCB是记录OS所需、用于描述进程当前情况以及控制进程运行的全部信息，<strong>是进程存在的唯一标志</strong>，常驻内存。</p></blockquote><h3 id="进程的互斥与同步"><a href="#进程的互斥与同步" class="headerlink" title="进程的互斥与同步"></a>进程的互斥与同步</h3><ul><li>进程互斥：进程在运行中竞争系统资源，对于独占型资源，只能一个进程使用完，另一个进程才能使用。</li><li>进程同步：异步环境下，互相合作的进程按各自独立的速度向前推进，但在某些确定点上必须协调工作。</li></ul><h3 id="互斥、同步机制遵循原则"><a href="#互斥、同步机制遵循原则" class="headerlink" title="互斥、同步机制遵循原则"></a>互斥、同步机制遵循原则</h3><ol><li>空闲让进</li><li>忙则等待</li><li>有限等待</li><li>让权等待</li></ol><h3 id="前驱图"><a href="#前驱图" class="headerlink" title="前驱图"></a>前驱图</h3><p>实现：信号量与P、V原语操作<br><code>v就是箭头指向别人，p就是被别人指</code><br>经典问题：生产者——消费者、小和尚与老和尚</p><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><ol><li>高级通信：会话式、主从式、消息缓冲机制、邮箱通信</li><li>低级通信</li></ol><h3 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h3><p>产生死锁问题的必要条件：  </p><ol><li>互斥条件</li><li>不剥夺条件</li><li>部分分配</li><li>环路条件</li></ol><p>避免死锁的经典问题：银行家算法<br>设系统中有三种类型的资源（A、B、C）和五个进程（P1、P2、P3、P4、P5），A资源的数量是17，B资源的数量是6，C资源的数量是19。在T0时刻的状态如下：若当前剩余资源（A、B、C）分别为（2，3，3）。请采用银行家算法写出它的安全序列。<br>若P4在T0时刻提出（1，1，0）时是否存在安全序列。</p><table><thead><tr><th align="center"></th><th align="center">资源最大需求</th><th align="center">已分配资源量</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">0 0 6</td><td align="center">4 0 5</td></tr><tr><td align="center">P2</td><td align="center">1 3 4</td><td align="center">4 0 2</td></tr><tr><td align="center">P3</td><td align="center">2 1 1</td><td align="center">2 1 4</td></tr><tr><td align="center">P4</td><td align="center">3 4 7</td><td align="center">2 1 2</td></tr><tr><td align="center">P5</td><td align="center">1 1 1</td><td align="center">3 1 3</td></tr></tbody></table><hr><p>解：</p><table><thead><tr><th align="center">进程</th><th align="center">max</th><th align="center">allocation</th><th align="center">need</th><th align="center">available</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">0 0 6</td><td align="center">4 0 5</td><td align="center">0 0 1</td><td align="center">2 3 3</td></tr><tr><td align="center">P2</td><td align="center">1 3 4</td><td align="center">4 0 2</td><td align="center">0 3 2</td><td align="center"></td></tr><tr><td align="center">P3</td><td align="center">2 1 1</td><td align="center">2 1 4</td><td align="center">0 0 0</td><td align="center"></td></tr><tr><td align="center">P4</td><td align="center">3 4 7</td><td align="center">2 1 2</td><td align="center">1 3 5</td><td align="center"></td></tr><tr><td align="center">P5</td><td align="center">1 1 1</td><td align="center">3 1 3</td><td align="center">0 0 0</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">进程</th><th align="center">work</th><th align="center">allocation</th><th align="center">need</th><th align="center">work+allocation</th></tr></thead><tbody><tr><td align="center">P3</td><td align="center">2 3 3</td><td align="center">2 1 4</td><td align="center">0 0 0</td><td align="center">4 4 7</td></tr><tr><td align="center">P4</td><td align="center">4 4 7</td><td align="center">2 1 2</td><td align="center">1 3 5</td><td align="center">6 5 9</td></tr><tr><td align="center">P5</td><td align="center">6 5 9</td><td align="center">3 1 3</td><td align="center">0 0 0</td><td align="center">9 6 12</td></tr><tr><td align="center">P1</td><td align="center">9 6 12</td><td align="center">4 0 5</td><td align="center">0 0 1</td><td align="center">13 6 17</td></tr><tr><td align="center">P2</td><td align="center">13 6 17</td><td align="center">4 0 2</td><td align="center">0 3 2</td><td align="center">17 6 19</td></tr></tbody></table><p>安全序列为P3、P4、P5、P1、P2</p><hr><p>P4请求（1，1，0）&lt; need（1，3，5）<br>P4请求（1，1，0）&lt; available（2，3，3）</p><table><thead><tr><th align="center">进程</th><th align="center">max</th><th align="center">allocation</th><th align="center">need</th><th align="center">available</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">0 0 6</td><td align="center">4 0 5</td><td align="center">0 0 1</td><td align="center">1 2 3</td></tr><tr><td align="center">P2</td><td align="center">1 3 4</td><td align="center">4 0 2</td><td align="center">0 3 2</td><td align="center"></td></tr><tr><td align="center">P3</td><td align="center">2 1 1</td><td align="center">2 1 4</td><td align="center">0 0 0</td><td align="center"></td></tr><tr><td align="center">P4</td><td align="center">3 4 7</td><td align="center">3 2 2</td><td align="center">0 2 5</td><td align="center"></td></tr><tr><td align="center">P5</td><td align="center">1 1 1</td><td align="center">3 1 3</td><td align="center">0 0 0</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">进程</th><th align="center">work</th><th align="center">allocation</th><th align="center">need</th><th align="center">work+allocation</th></tr></thead><tbody><tr><td align="center">P3</td><td align="center">1 2 3</td><td align="center">2 1 4</td><td align="center">0 0 0</td><td align="center">3 3 7</td></tr><tr><td align="center">P4</td><td align="center">3 3 7</td><td align="center">3 2 2</td><td align="center">0 2 5</td><td align="center">6 5 9</td></tr><tr><td align="center">P5</td><td align="center">6 5 9</td><td align="center">3 1 3</td><td align="center">0 0 0</td><td align="center">9 6 12</td></tr><tr><td align="center">P1</td><td align="center">9 6 12</td><td align="center">4 0 5</td><td align="center">0 0 1</td><td align="center">13 6 17</td></tr><tr><td align="center">P2</td><td align="center">13 6 17</td><td align="center">4 0 2</td><td align="center">0 3 2</td><td align="center">17 6 19</td></tr></tbody></table><p>存在安全序列P3、P4、P5、P1、P2</p><hr><h3 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h3><blockquote><p>线程是进程的一部分；它没有自己的地址空间；它和进程中的其他线程一起共享分配给该进程的所有资源。</p></blockquote><h3 id="线程状态转换图"><a href="#线程状态转换图" class="headerlink" title="线程状态转换图"></a>线程状态转换图</h3><p><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202112212224512.png" alt="线程状态转换图"></p><h2 id="处理及调度"><a href="#处理及调度" class="headerlink" title="处理及调度"></a>处理及调度</h2><h3 id="作业状态"><a href="#作业状态" class="headerlink" title="作业状态"></a>作业状态</h3><blockquote><p>提交、收容、执行和完成四个状态</p></blockquote><h3 id="调度等级"><a href="#调度等级" class="headerlink" title="调度等级"></a>调度等级</h3><ul><li>高级调度：按一定原则选出一些作业，并分配必要的资源，建立根进程以使该作业的进程获得竞争处理机的权力。</li><li>中级调度：按给定的原则，把处于就绪状态或等待状态的的进程调入内存，或交换到外存交换区。</li><li>低级调度：按照某种方法选取一个处于就绪状态的进程占用处理机。</li></ul><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><ol><li>FCFS（先来先服务）</li><li>SJF（最短作业优先）</li><li>HRN（最高响应比）</li></ol><hr><p>例题：</p><p>单道环境下的四个作业，进入系统的时间如下：<br>写出先来先服务算法、最短作业优先算法，并求出平均周转时间和带权平均周转时间（保留两位小数）</p><table><thead><tr><th align="center">作业</th><th align="center">进入时间</th><th align="center">运行时间(分钟)</th></tr></thead><tbody><tr><td align="center">job1</td><td align="center">8:00</td><td align="center">120</td></tr><tr><td align="center">job2</td><td align="center">8:50</td><td align="center">50</td></tr><tr><td align="center">job3</td><td align="center">9:00</td><td align="center">10</td></tr><tr><td align="center">job4</td><td align="center">9:50</td><td align="center">20</td></tr></tbody></table><p>解：</p><p>先来先服务</p><table><thead><tr><th align="center">作业</th><th align="center">进入时间</th><th align="center">运行时间(分钟)</th><th align="center">开始时间</th><th align="center">结束时间</th><th align="center">周转时间</th><th align="center">带权周转时间</th></tr></thead><tbody><tr><td align="center">job1</td><td align="center">8:00</td><td align="center">120</td><td align="center">8:00</td><td align="center">10:00</td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">job2</td><td align="center">8:50</td><td align="center">50</td><td align="center">10:00</td><td align="center">10:50</td><td align="center">2</td><td align="center">2.4</td></tr><tr><td align="center">job3</td><td align="center">9:00</td><td align="center">10</td><td align="center">10:50</td><td align="center">11:00</td><td align="center">2</td><td align="center">12</td></tr><tr><td align="center">job4</td><td align="center">9:50</td><td align="center">20</td><td align="center">11:00</td><td align="center">11:20</td><td align="center">1.5</td><td align="center">4.5</td></tr></tbody></table><blockquote><p>周转时间=结束时间-进入时间<br>带权周转时间=周转时间/运行时间</p></blockquote><p>平均周转时间：(2+2+2+1.5)/4≈1.88<br>带权平均周转时间：(1+2.4+12+4.5)/4≈4.98</p><p>最短作业优先</p><table><thead><tr><th align="center">作业</th><th align="center">进入时间</th><th align="center">运行时间(分钟)</th><th align="center">开始时间</th><th align="center">结束时间</th><th align="center">周转时间</th><th align="center">带权周转时间</th></tr></thead><tbody><tr><td align="center">job1</td><td align="center">8:00</td><td align="center">120</td><td align="center">8:00</td><td align="center">10:00</td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">job3</td><td align="center">9:00</td><td align="center">10</td><td align="center">10:00</td><td align="center">10:10</td><td align="center">7/6</td><td align="center">7</td></tr><tr><td align="center">job4</td><td align="center">9:50</td><td align="center">20</td><td align="center">10:10</td><td align="center">10:30</td><td align="center">2/3</td><td align="center">2</td></tr><tr><td align="center">job2</td><td align="center">8:50</td><td align="center">50</td><td align="center">10:30</td><td align="center">11:20</td><td align="center">2.5</td><td align="center">3</td></tr></tbody></table><p>平均周转时间：(2+7/6+2/3+2.5)/4≈1.58<br>带权平均周转时间：(1+7+2+3)/4≈3.25</p><p>最高响应比</p><table><thead><tr><th align="center">作业</th><th align="center">进入时间</th><th align="center">运行时间(分钟)</th><th align="center">开始时间</th><th align="center">结束时间</th><th align="center">周转时间</th></tr></thead><tbody><tr><td align="center">job1</td><td align="center">8:00</td><td align="center">120</td><td align="center">8:00</td><td align="center">10:00</td><td align="center">2</td></tr><tr><td align="center">job3</td><td align="center">9:00</td><td align="center">10</td><td align="center">10:00</td><td align="center">10:10</td><td align="center">7/6</td></tr><tr><td align="center">job2</td><td align="center">8:50</td><td align="center">50</td><td align="center">10:10</td><td align="center">11:00</td><td align="center">13/6</td></tr><tr><td align="center">job4</td><td align="center">9:50</td><td align="center">20</td><td align="center">11:00</td><td align="center">11:20</td><td align="center">1.5</td></tr></tbody></table><p>10:00计算响应比<br>job2：(70+50)/50=2.4<br>job3：(60+10)/10=7<br>job4：(10+20)/20=1.5<br>所以选择job3  </p><p>10:10计算响应比<br>job2：(80+50)/50=2.6<br>job4：(20+20)/20=2<br>所以选择job2<br>平均周转时间：(2+7/6+13/6+1.5)/4≈1.71</p><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><h3 id="存储管理的基本任务和主要功能"><a href="#存储管理的基本任务和主要功能" class="headerlink" title="存储管理的基本任务和主要功能"></a>存储管理的基本任务和主要功能</h3><p>基本任务：主存空间分配、地址变换、存储保护和存储扩充</p><h3 id="虚拟存储器和地址重定位"><a href="#虚拟存储器和地址重定位" class="headerlink" title="虚拟存储器和地址重定位"></a>虚拟存储器和地址重定位</h3><p>虚拟存储器概念：</p><blockquote><p>为解决内存小而作业大、作业多的矛盾，应该把一个程序当前正在使用的部分放在内存，而其余部分放在磁盘上。</p></blockquote><p>地址重定位概念：</p><blockquote><p>内存地址的集合称为内存空间或物理地址空间。内存中，每一个存储单元都与相应的内存地址的编号相对应，显然，内存空间是一维线性的。</p></blockquote><h3 id="分区、分页、分段三者的区别"><a href="#分区、分页、分段三者的区别" class="headerlink" title="分区、分页、分段三者的区别"></a>分区、分页、分段三者的区别</h3><p>区别：</p><h3 id="覆盖和交换"><a href="#覆盖和交换" class="headerlink" title="覆盖和交换"></a>覆盖和交换</h3><p>覆盖技术概念：</p><blockquote><p>程序划分为若干个功能上相对独立的程序段，按照程序逻辑结构让那些不需要同时执行的程序端共享同一块内存区。</p></blockquote><p>交换技术概念：</p><blockquote><p>对象是进程，等待状态的进程驻留内存会造成存储空间的浪费。因此，有必要把处于等待状态的进程换出内存。交换技术是实现此目标的常用方法之一。</p></blockquote><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><ol><li>先进先出置换算法（FIFO）：淘汰存在次数最多的</li><li>最佳置换算法（OPT）：淘汰未来最久不会被用到的</li><li>最近最久未使用算法（LRU）：淘汰最近最左边的那个</li></ol><p><a href="https://www.bilibili.com/video/BV1ht411W7uB?p=4">计算缺页率教程</a></p><h3 id="根据逻辑地址求物理地址"><a href="#根据逻辑地址求物理地址" class="headerlink" title="根据逻辑地址求物理地址"></a>根据逻辑地址求物理地址</h3><table><thead><tr><th align="center">页号</th><th align="center">块号</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">2</td></tr><tr><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">2</td><td align="center">6</td></tr><tr><td align="center">3</td><td align="center">8</td></tr></tbody></table><p>已知每页大小2048字节，求逻辑地址4865对应的物理地址。</p><p>解：<br>页号=逻辑地址/页大小=4865/2048=2<br>页内地址=逻辑地址%页大小=4865%2048=769<br>第2页对应6块<br>物理地址=块数*块大小(页大小)+页内地址=6*2048+769=13057</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="文件和文件系统、文件系统功能"><a href="#文件和文件系统、文件系统功能" class="headerlink" title="文件和文件系统、文件系统功能"></a>文件和文件系统、文件系统功能</h3><p>文件：</p><blockquote><p>文件是一段程序或数据的集合</p></blockquote><p>文件系统：</p><blockquote><p>操作系统中与管理文件有关的软件和数据称为文件系统</p></blockquote><p>功能：</p><blockquote><ol><li>对文件空间进行统一管理</li><li>实现按名存取，有用户可见的文件逻辑结构</li><li>文件的物理结构</li><li>完成文件的查找</li><li>完成文件的共享和保护</li></ol></blockquote><h3 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h3><ol><li>顺序的</li><li>先排序在找最近的</li></ol><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><h3 id="设备管理的目标和任务"><a href="#设备管理的目标和任务" class="headerlink" title="设备管理的目标和任务"></a>设备管理的目标和任务</h3><p>目标：</p><blockquote><p>对计算机输入输出系统的管理</p></blockquote><p>任务：</p><ol><li>选择和分配输入输出设备</li><li>控制输出输出设备和CPU之间交换数据</li><li>为用户提供友好的透明接口</li><li>提高并行操作度，提高操作系统效率</li></ol><h3 id="数据传送控制方式"><a href="#数据传送控制方式" class="headerlink" title="数据传送控制方式"></a>数据传送控制方式</h3><ol><li>程序直接控制方式</li><li>中断方式</li><li>DMA方式</li></ol><h3 id="中断技术、中断处理过程"><a href="#中断技术、中断处理过程" class="headerlink" title="中断技术、中断处理过程"></a>中断技术、中断处理过程</h3><blockquote><p>使CPU暂时中断当前正在执行的程序，转去执行相应的急需处理的程序，处理完毕后返回中断处继续执行</p></blockquote><p>中断处理过程：</p><ol><li>检查响应中断条件是否满足</li><li>如果CPU响应中断，则CPU关中断，使CPU进入不可再次响应中断的状态</li><li>保存被中断进程现场</li><li>分析中断原因，调用中断处理子程序</li><li>执行中断处理子程序</li><li>退出中断，恢复被中断进程的现场</li><li>开中断，CPU继续执行</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第11天</title>
      <link href="/posts/9866.html"/>
      <url>/posts/9866.html</url>
      
        <content type="html"><![CDATA[<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><ul><li>权限修饰符:是用来控制一个成员能够被访问的范围的。</li><li>可以修饰成员变量，方法，构造器，内部类，不同权限修饰符修饰的成员能够被访问的范围将受到限制。</li></ul><h3 id="权限修饰符的分类和具体作用范围"><a href="#权限修饰符的分类和具体作用范围" class="headerlink" title="权限修饰符的分类和具体作用范围"></a>权限修饰符的分类和具体作用范围</h3><ul><li>权限修饰符:有四种作用范围由小到大(private -&gt; 缺省 -&gt; protected -&gt; public )</li></ul><table><thead><tr><th align="center">修饰符</th><th align="center">同一个类中</th><th align="center">同一个包中其他类</th><th align="center">不同包下的子类</th><th align="center">不同包下的无关类</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">缺省</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><h3 id="学完权限修饰符需要具备如下能力"><a href="#学完权限修饰符需要具备如下能力" class="headerlink" title="学完权限修饰符需要具备如下能力"></a>学完权限修饰符需要具备如下能力</h3><ul><li>能够识别别人定义的成员的访问权限。</li><li>自己定义成员（方法，成员变量，构造器等）一般满足如下要求:<ul><li>成员变量一般私有。</li><li>方法一般公开。</li><li>如果该成员只希望本类访问，使用private修饰。</li><li>如果该成员只希望本类，同一个包下的其他类和子类访问，使用protected修饰。</li></ul></li></ul><hr><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="final的作用"><a href="#final的作用" class="headerlink" title="final的作用"></a>final的作用</h3><ul><li>final关健字是最终的意思，可以修饰（方法，变量，类)</li><li>修饰方法:表明该方法是最终方法，不能被重写。</li><li>修饰变量:表示该变量第一次赋值后，不能再次被赋值(有且仅能被赋值一次)。</li><li>修饰类:表明该类是最终类，不能被继承。</li></ul><h3 id="final修饰变量的注意"><a href="#final修饰变量的注意" class="headerlink" title="final修饰变量的注意"></a>final修饰变量的注意</h3><ul><li>final修饰的变量是基本类型:那么变量存储的数据值不能发生改变。</li><li>final修饰的变量是引用类型:那么变量存储的地址值不能发生改变，但是地址指向的对象内容是可以发生变化的。（例如数组元素可以变，但是不能给数组重新赋值）</li></ul><hr><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li>常量是使用了public static final修饰的成员变量，必须有初始化值，而且执行的过程中其值不能被改变。</li><li>常量的作用和好处:可以用于做系统的配置信息，方便程序的维护，同时也能提高可读性。</li></ul><h3 id="常量命名规范"><a href="#常量命名规范" class="headerlink" title="常量命名规范"></a>常量命名规范</h3><p>英文单词全部大写,多个单词下划线连接起来。</p><h3 id="常量的执行原理"><a href="#常量的执行原理" class="headerlink" title="常量的执行原理"></a>常量的执行原理</h3><ul><li>在编译阶段会进行“宏替换”，把使用常量的地方全部替换成真实的字面量。</li><li>这样做的好处是让使用常量的程序的执行性能与直接使用字面量是一样的。</li></ul><h3 id="选择常量做信息标志和分类"><a href="#选择常量做信息标志和分类" class="headerlink" title="选择常量做信息标志和分类"></a>选择常量做信息标志和分类</h3><p>代码可读性好，实现了软编码形式。</p><hr><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="枚举的概述"><a href="#枚举的概述" class="headerlink" title="枚举的概述"></a>枚举的概述</h3><ul><li>枚举是Java中的一种特殊类型</li><li>枚举的作用:”是为了做信息的标志和信息的分类”。</li><li>定义枚举类的格式：</li></ul><blockquote><p>修饰符enum枚举名称{<br>第一行都是罗列妆举类实例的名称。<br>}</p></blockquote><hr><blockquote><p>enum Season{<br>SPRING , SUMMER ,AUTUMN , WINTER;<br>}</p></blockquote><h3 id="枚举的特征"><a href="#枚举的特征" class="headerlink" title="枚举的特征"></a>枚举的特征</h3><ul><li>枚举类都是继承了枚举类型:java.lang.Enum</li><li>枚举都是最终类，不可以被继承。</li><li>构造器的构造器都是私有的，枚举对外不能创建对象。</li><li>枚举类的第一行默认都是罗列枚举对象的名称的。</li><li>枚举类相当于是多例模式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经营了1216天的感情结束了</title>
      <link href="/posts/12271.html"/>
      <url>/posts/12271.html</url>
      
        <content type="html"><![CDATA[<meting-js metin="meting" server="netease" type="song" id="30431367" autoplay="true"></meting-js><h2 id="时间2021年12月17日02-15"><a href="#时间2021年12月17日02-15" class="headerlink" title="时间2021年12月17日02:15"></a>时间2021年12月17日02:15</h2><h2 id="在一起的第1216天"><a href="#在一起的第1216天" class="headerlink" title="在一起的第1216天"></a>在一起的第1216天</h2><p>分分合合那么多次，虽然不敢面对，但我也知道这次是真的了。</p><p>她让我分手，她说她能找到更好的，我让她解脱。<br>最近我需要学习，白天没时间陪她。<br>我爱她，尽管她想方设法恶心过我，我还是很爱她。<br>我大学陪着她浑浑噩噩，我现在选择学习三个月，<br>也是为了我和她能有未来。<br>她才答应等我三个月，结果只等了我三天。<br>我可能考虑得太远了，轻视了当下和她共处的时间。<br>她给了我足够的理由，我现在配不上她。  </p><p>你一天刷几小时抖音，我根本没时间看你@我的。<br>你无理取闹的时候，我也会忍不住凶你。<br>你现在确实没有以前那么凶那么爱生气了。<br>我却开始变成了你以前的样子。<br>你成长了，我却没有。  </p><p>提前祝你成年生日快乐。<br>我应该是没有机会陪你过了。<br>还有这些年许下的种种承诺，<br>都来不及兑现了。  </p><p>我不能耽误你了。<br>谢谢你还想跟我做朋友，<br>但是我不能留在你的生活中。<br>我受不了你近在眼前却不属于我的感觉，<br>你知道的，我占有欲很强，不想可望而不可及。<br>让我再自私这最后一次吧。<br>我爱你 卡洛<br>再见了</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第10天</title>
      <link href="/posts/55947.html"/>
      <url>/posts/55947.html</url>
      
        <content type="html"><![CDATA[<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="static关键字的作用"><a href="#static关键字的作用" class="headerlink" title="static关键字的作用"></a>static关键字的作用</h3><ul><li>static是静态的意思，可以修饰成员变量，表示该成员变量只在内存中只存储一份，可以被共享访问、修改。</li></ul><h3 id="成员变量可以分为2类"><a href="#成员变量可以分为2类" class="headerlink" title="成员变量可以分为2类"></a>成员变量可以分为2类</h3><ul><li><p>静态成员交量（有static修饰，属于类，内存中加载一次)︰常表示如在线人数信息、等需要被共享的信息，可以被共享访问。</p><blockquote><p>类名.静态成员变量</p></blockquote></li><li><p>实例成员变量（无static修饰，存在于每个对象中)∶常表示姓名name、年龄age、等属于每个对象的信息。</p><blockquote><p>对象.实例成员变量</p></blockquote></li></ul><h3 id="成员方法的分类"><a href="#成员方法的分类" class="headerlink" title="成员方法的分类"></a>成员方法的分类</h3><ul><li>静态成员方法（有static修饰，属于类)，建议用类名访问，也可以用对象访问。<blockquote><p>表示对象自己的行为的，且方法中需要访问实例成员的，则该方法必须申明成实例方法。</p></blockquote></li><li>实例成员方法（无static修饰，属于对象），只能用对象触发访问。<blockquote><p>如果该方法是以执行一个通用功能为目的，或者需要方便访问，则可以申明成静态方法。</p></blockquote></li></ul><h3 id="static访问注意事项"><a href="#static访问注意事项" class="headerlink" title="static访问注意事项"></a>static访问注意事项</h3><ul><li>静态方法只能访问静态的成员，不可以直接访问实例成员。</li><li>实例方法可以访问静态的成员，也可以访问实例成员。</li><li>静态方法中是不可以出现this关键字的。</li></ul><h3 id="代码块概述"><a href="#代码块概述" class="headerlink" title="代码块概述"></a>代码块概述</h3><ul><li>代码块是类的5大成分之一（成员变量、构造器，方法，代码块，内部类)，定义在类中方法外。</li><li>在Java类下，使用(}括起来的代码被称为代码块。</li></ul><p>代码块分为</p><ul><li>静态代码块:<blockquote><p>格式:static{}<br>特点:需要通过static关键字修饰，随着类的加载而加载，并且自动触发、只执行一次<br>使用场景:在类加载的时候做一些静态数据初始化的操作，以便后续使用。</p></blockquote></li><li>构造代码块（了解，用的少)∶<blockquote><p>格式:{}<br>特点:每次创建对象，调用构造器执行时，都会执行该代码块中的代码，并且在构造器执行前执行<br>使用场景:初始化实例资源。</p></blockquote></li></ul><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p>什么是设计模式(Design pattern)  </p><blockquote><p>设计模式是一套被前人反复使用、多数人知晓、经过分类编目的代码设计经验的总结，后来者可以直接拿来解决问题设计模式是软设计中的常见解决方案，好的设计模式可以进一步的提高代码的重用性。  </p></blockquote><p>单例模式  </p><blockquote><p>可以保证系统中，应用该模式的这个类永远只有一个实例，即一个类永远只能创建一个对象。  </p></blockquote><p>单例的场景和作用  </p><blockquote><p>例如任务管理器对象我们只需要一个就可以解决问题了，这样可以节省内存空间。</p></blockquote><h4 id="饿汉单例设计模式"><a href="#饿汉单例设计模式" class="headerlink" title="饿汉单例设计模式"></a>饿汉单例设计模式</h4><p>在用类获取对象的时候，对象已经提前为你创建好了</p><p>设计步骤:</p><ul><li>定义一个类，把构造器私有。</li><li>定义一个静态变量存储一个对象。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**a、定义一个单例类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> singleInstance <span class="token punctuation">{</span><span class="token comment">/**c.定义一个静态变量存储一个对象即可:属于类，与类一起加载一次*/</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> singleInstance instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SinglcInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**b.单例必须私有构造器*/</span>    <span class="token keyword">private</span> singleInstance <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Systen</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span><span class="token string">"创建了一个对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="懒汉单例设计横式"><a href="#懒汉单例设计横式" class="headerlink" title="懒汉单例设计横式"></a>懒汉单例设计横式</h4><p>在真正需要该对象的时候，才去创建一个对象（延迟加载对象）</p><p>设计步骤:</p><ul><li>定义一个类，把构造器私有。</li><li>定义一个静态变量存储一个对象。</li><li>提供一个返回单例对象的方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**a、定义一个单例类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> singleInstance <span class="token punctuation">{</span><span class="token comment">/**c.定义一个静态变量存储一个对象即可:属于类，与类一起加载一次*/</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> singleInstance instance<span class="token punctuation">;</span><span class="token comment">/**b.单例必须私有构造器*/</span>    <span class="token keyword">private</span> singleInstance <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">/**d.必须提供一个方法返回一个单例对象*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleInstance</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">singleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsDelivr 缓存刷新</title>
      <link href="/posts/27468.html"/>
      <url>/posts/27468.html</url>
      
        <content type="html"><![CDATA[<h2 id="CDN-缓存"><a href="#CDN-缓存" class="headerlink" title="CDN 缓存"></a>CDN 缓存</h2><p>jsDelivr 提供的全球 CDN 加速，CDN的分流作用不仅减少了用户的访问延时，也减少的源站的负载。但其缺点也很明显：当网站更新时，如果CDN节点上数据没有及时更新，即便用户再浏览器使用Ctrl +F5的方式使浏览器端的缓存失效，也会因为CDN边缘节点没有同步最新数据而导致用户端未能及时更新</p><hr><p>CDN边缘节点对开发者是透明的，相比于浏览器Ctrl+F5的强制刷新来使浏览器本地缓存失效，开发者可以通过CDN服务商提供的“刷新缓存”接口来达到清理CDN边缘节点缓存的目的。这样开发者在更新数据后，可以使用“刷新缓存”功能来强制CDN节点上的数据缓存过期，保证客户端在访问时，拉取到最新的数据。</p><h2 id="jsDelivr-缓存刷新方式"><a href="#jsDelivr-缓存刷新方式" class="headerlink" title="jsDelivr 缓存刷新方式"></a>jsDelivr 缓存刷新方式</h2><p>对于 jsDelivr，缓存刷新的方式也很简单，只需将想刷新的链接的开头的</p><p><a href="https://cdn.jsdelivr.net/">https://cdn.jsdelivr.net/</a>…<br>替换成</p><p><a href="https://purge.jsdelivr.net/">https://purge.jsdelivr.net/</a>…<br>用浏览器打开这个链接，即可实时刷新。<br>刷新成功后，浏览器会返回缓存刷新成功的信息，如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"QvIVwzidVaTW93LI"</span><span class="token punctuation">,</span>  <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"finished"</span><span class="token punctuation">,</span>  <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"2021-12-15T13:01:03.892Z"</span><span class="token punctuation">,</span>  <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"/gh/limitlm/limitlm.github.io/medias/banner/0.jpg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"throttled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"providers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"fastly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"bunny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"cloudflare"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"quantil"</span><span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p><strong>不要连续多次刷新，否则会被当成攻击，会被限制1小时左右的时间不能刷新！！！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cdn </tag>
            
            <tag> jsDeliver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.git文件夹太大的解决方法</title>
      <link href="/posts/9817.html"/>
      <url>/posts/9817.html</url>
      
        <content type="html"><![CDATA[<p>今天想提交项目代码时发现文件.git文件夹越来越大, 然后花点时间研究了下，在网上查了几篇博文，成功把文件大小缩小了4倍。这里整理了一下思路，大致的意思就是找到git历史记录提交了哪些大文件. 然后重构git，让pack包变小。</p><h2 id="一、打开终端"><a href="#一、打开终端" class="headerlink" title="一、打开终端"></a>一、打开终端</h2><p>进入项目文件夹，鼠标右键git bash here进入终端</p><h2 id="二、查找大文件"><a href="#二、查找大文件" class="headerlink" title="二、查找大文件"></a>二、查找大文件</h2><p>命令如下，查找大小前五的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rev-list --objects --all <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> verify-pack -v .git/objects/pack/*.idx <span class="token operator">|</span> <span class="token function">sort</span> -k <span class="token number">3</span> -n <span class="token operator">|</span> <span class="token function">tail</span> -5 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print$1}'</span><span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除指定大文件"><a href="#删除指定大文件" class="headerlink" title="删除指定大文件"></a>删除指定大文件</h2><p>我这里是因为第一次提交更新壁纸，忘记把壁纸压缩了，一张壁纸7MB，导致历史记录文件变大。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> filter-branch --force --index-filter <span class="token string">"git rm -rf --cached --ignore-unmatch 'themes/hexo-theme-matery/source/medias/banner'"</span> --prune-empty --tag-name-filter <span class="token function">cat</span> -- --all<span class="token function">git</span> for-each-ref --format<span class="token operator">=</span><span class="token string">'delete %(refname)'</span> refs/original <span class="token operator">|</span> <span class="token function">git</span> update-ref --stdin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里因为是删文件夹，所以使用的命令是<code>rm -rf</code>，如果是删一个文件，只需要<code>rm</code>就行了。</p><h2 id="四、重新标记过期的缓存文件"><a href="#四、重新标记过期的缓存文件" class="headerlink" title="四、重新标记过期的缓存文件"></a>四、重新标记过期的缓存文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reflog expire --expire<span class="token operator">=</span>now --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、回收过期的缓存"><a href="#五、回收过期的缓存" class="headerlink" title="五、回收过期的缓存"></a>五、回收过期的缓存</h2><p>使用gc命令清理空间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> gc --prune<span class="token operator">=</span>now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、查看文件大小"><a href="#六、查看文件大小" class="headerlink" title="六、查看文件大小"></a>六、查看文件大小</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> count-objects -v<span class="token function">du</span> -sh .git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一个命令返回pack包大小。<br>第二个命令返回.git文件夹大小。</p><h2 id="七、重新提交"><a href="#七、重新提交" class="headerlink" title="七、重新提交"></a>七、重新提交</h2><p>要用<code>--force</code>命令强制提交到远程仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push --all --force origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="push失败"><a href="#push失败" class="headerlink" title="push失败"></a>push失败</h3><p>如果遇到push不了的，可以尝试重新设置与远程仓库的连接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin ssh://git@github.com/limitlm/blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用<code>git remote -v</code>命令查看是否更改正确。<br>重新push应该就能成功了。</p><hr><h3 id="git-ssh和https切换"><a href="#git-ssh和https切换" class="headerlink" title="git ssh和https切换"></a>git ssh和https切换</h3><blockquote><p>从ssh切换至https</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin https://email/username/ProjectName.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>从https切换至ssh</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin git@email:username/ProjectName.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级Java项目——AtmSystem</title>
      <link href="/posts/48428.html"/>
      <url>/posts/48428.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先新建银行账户类"><a href="#首先新建银行账户类" class="headerlink" title="首先新建银行账户类"></a>首先新建银行账户类</h2><p>有五个属性，分别是卡号，姓名，密码，余额，每次限额</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>limitlm</span><span class="token punctuation">;</span><span class="token comment">/** * @author longze * 账户类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cardId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> passWord<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> money<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> quotaMoney<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> cardId<span class="token punctuation">,</span> <span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> passWord<span class="token punctuation">,</span> <span class="token keyword">double</span> quotaMoney<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cardId <span class="token operator">=</span> cardId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>passWord <span class="token operator">=</span> passWord<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>quotaMoney <span class="token operator">=</span> quotaMoney<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cardId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCardId</span><span class="token punctuation">(</span><span class="token class-name">String</span> cardId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cardId <span class="token operator">=</span> cardId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> passWord<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> passWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>passWord <span class="token operator">=</span> passWord<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getQuotaMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> quotaMoney<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setQuotaMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> quotaMoney<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>quotaMoney <span class="token operator">=</span> quotaMoney<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//1.容器，储存账户类</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.系统首页：登陆注册</span>    <span class="token function">showMain</span><span class="token punctuation">(</span>accounts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="系统首页"><a href="#系统首页" class="headerlink" title="系统首页"></a>系统首页</h2><p>两个功能，登陆和开户</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMain</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********欢迎进入首页********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您想做的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1：登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2：开户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"您可以输入命令："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> command <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token comment">//登陆</span>                <span class="token function">login</span><span class="token punctuation">(</span>accounts<span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token comment">//注册</span>                <span class="token function">register</span><span class="token punctuation">(</span>accounts<span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开户功能"><a href="#开户功能" class="headerlink" title="开户功能"></a>开户功能</h3><p><strong>分析</strong><br>开户功能其实就是就是往系统的集合容器中存入一个新的账户对象的信息。<br><strong>开户功能实现步骤</strong>  </p><ol><li>定义方法完成开户：private static void register()</li><li>键盘录入姓名、密码、确认密码（需保证两次密码一致）</li><li>生成账户卡号，卡号必须由系统自动生成8位数字（必须保证卡号的唯一）</li><li>创建Account账户类对象用于封装账户信息（姓名、密码、卡号）</li><li>把Account账户类对象存入到集合accounts中去。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 用户注册功能 * * @param accounts 账户集合对象 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">,</span> <span class="token class-name">Scanner</span> sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********用户注册功能********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        password <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请再次输入确认密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> okPassword <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断两次密码是否一致</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>okPassword<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两次密码不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入每次限额"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> quotaMoney <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.生成卡号</span>    <span class="token class-name">String</span> cardId <span class="token operator">=</span> <span class="token function">creatCardId</span><span class="token punctuation">(</span>accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.封装账户对象</span>    <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span>cardId<span class="token punctuation">,</span> name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> quotaMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.将对象添加到集合中</span>    accounts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注册成功，您的卡号为："</span> <span class="token operator">+</span> account<span class="token punctuation">.</span><span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 请保存好记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="随机生成卡号功能"><a href="#随机生成卡号功能" class="headerlink" title="随机生成卡号功能"></a>随机生成卡号功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">creatCardId</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//生成8为随机数作为卡号</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> cardId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cardId<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//判断卡号是否重复</span>        <span class="token class-name">Account</span> acc <span class="token operator">=</span> <span class="token function">getAccountByCardId</span><span class="token punctuation">(</span>cardId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>acc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//不重复</span>            <span class="token keyword">return</span> cardId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登陆功能"><a href="#登陆功能" class="headerlink" title="登陆功能"></a>登陆功能</h3><ol><li>定义方法: public static void login()</li><li>让用户键盘录入卡号，根据卡号查询账户对象。</li><li>如果没有找到了账户对象，说明卡号不存在，提示继续输入卡号。</li><li>如果找到了账户对象，说明卡号存在，继续输入密码。</li><li>如果密码不正确。提示继续输入密码</li><li>如果密码正确。提示登陆成功!!</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 登录功能 * * @param accounts 账户集合对象 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">,</span> <span class="token class-name">Scanner</span> sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accounts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前系统中无账户，请先注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入卡号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> cardId <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Account</span> acc <span class="token operator">=</span> <span class="token function">getAccountByCardId</span><span class="token punctuation">(</span>cardId<span class="token punctuation">,</span> accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>acc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//输入密码</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> passWord <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getPassWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>passWord<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//密码正确，登陆成功</span>                    <span class="token comment">//进入功能界面</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎您"</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"先生/女士，您的卡号为"</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">showCommand</span><span class="token punctuation">(</span>sc<span class="token punctuation">,</span> acc<span class="token punctuation">,</span> accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码错误，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"账户不存在，请确认信息正确后重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用户操作页面"><a href="#用户操作页面" class="headerlink" title="用户操作页面"></a>用户操作页面</h2><p>登陆成功后显示用户操作界面<br>有7个功能：查询、存款、取款、转账、修改密码、退出、销户</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 用户操作界面 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showCommand</span><span class="token punctuation">(</span><span class="token class-name">Scanner</span> sc<span class="token punctuation">,</span> <span class="token class-name">Account</span> acc<span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********用户操作页面********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您想做的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1：查询账户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2：存款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3：取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4：转账"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5：修改密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6：退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"7：销户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"您可以输入命令："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> command <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token comment">//查询账户</span>                <span class="token function">showAccount</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token comment">//存款</span>                <span class="token function">deposit</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token comment">//取款</span>                <span class="token function">drawMoney</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                <span class="token comment">//转账</span>                <span class="token function">transferMoney</span><span class="token punctuation">(</span>accounts<span class="token punctuation">,</span> acc<span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token comment">//修改密码</span>                <span class="token function">updatePassWord</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                <span class="token comment">//退出</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎下次使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                <span class="token comment">//销户</span>                accounts<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销户成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h3><p>第一种显示当前账户信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 显示当前账户信息 * * @param acc 当前账户 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********用户信息********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡号："</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额："</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每次限额："</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getQuotaMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种根据卡号查找账户</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 显示当前账户信息 * * @param acc 当前账户 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********用户信息********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡号："</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额："</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每次限额："</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getQuotaMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                <span class="token comment">//退出</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎下次使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存款功能"><a href="#存款功能" class="headerlink" title="存款功能"></a>存款功能</h3><ol><li>存款就是拿到当前账户对象。</li><li>然后让用户输入存款的金额。</li><li>调用账户对象的setMoney方法将账户余额修改成存钱后的余额。</li><li>存钱后需要查询一下账户信息，确认是否存钱成功了！</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 存款 * * @param acc 账户对象 * @param sc  输入对象 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acc<span class="token punctuation">,</span> <span class="token class-name">Scanner</span> sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********存款操作********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入存款金额"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> money <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保存到对象属性中去</span>    acc<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存款成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showAccount</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取款功能"><a href="#取款功能" class="headerlink" title="取款功能"></a>取款功能</h3><ol><li>取款需要先判断账户是否有钱。</li><li>有钱则拿到自己账户对象。</li><li>然后让用户输入取款金额。</li><li>判断取款金额是否超过了当次限额以及余额是否足够。</li><li>满足要求则调用账户对象的setMoney方法完成金额的修改。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 取款 * * @param acc 账户对象 * @param sc  输入对象 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawMoney</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acc<span class="token punctuation">,</span> <span class="token class-name">Scanner</span> sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********取款操作********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入取款金额"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> money <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&gt;</span> acc<span class="token punctuation">.</span><span class="token function">getQuotaMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前取款金额大于每次限额，请重新输入取款金额"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//可以取钱了</span>                    acc<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取款成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">showAccount</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足100无法取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转账功能"><a href="#转账功能" class="headerlink" title="转账功能"></a>转账功能</h3><ol><li>转账功能需要判断系统中是否有2个账户对象及以上。</li><li>同时还要判断自己账户是否有钱。</li><li>接下来需要输入对方卡号，判断对方账户是否存在。</li><li>对方账户存在还需要认证对方户主的姓氏。</li><li>满足要求则可以把自己账户对象的金额修改到对方账户对象中去。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 转账功能 * * @param accounts 账户集合 * @param acc      当前账户 * @param sc       输入对象 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">transferMoney</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">,</span> <span class="token class-name">Account</span> acc<span class="token punctuation">,</span> <span class="token class-name">Scanner</span> sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accounts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统中没有其他账户，暂时无法转账"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的账户没有余额可供转账"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入对方的卡号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> cardId <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token function">getAccountByCardId</span><span class="token punctuation">(</span>cardId<span class="token punctuation">,</span> accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>account <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//找到账户了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能给自己转账"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//确认姓氏</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"*"</span> <span class="token operator">+</span> account<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请确认【"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"】的姓氏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> preName <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>preName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//信息正确可以转账了</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入转账金额"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">double</span> money <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&gt;</span> acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起，您的转账金额大于账户的余额！您的余额为："</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment">//真真的可以转了</span>                        acc<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                        account<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经成功为"</span> <span class="token operator">+</span> account<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"转账了"</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">showAccount</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"信息有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起，系统中没找到你输入的账户，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改密码和销户功能"><a href="#修改密码和销户功能" class="headerlink" title="修改密码和销户功能"></a>修改密码和销户功能</h3><ol><li>修改密码就是把当前对象的密码属性使用set方法进行更新。</li><li>销户是从集合对象中删除当前对象，并回到首页。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 修改密码 * * @param acc 当前账户 * @param sc  输入对象 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updatePassWord</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acc<span class="token punctuation">,</span> <span class="token class-name">Scanner</span> sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********修改密码********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入当前的密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> okPassWord <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断旧密码是否正确</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getPassWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>okPassWord<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入新密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> newPassWord <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请确认新密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> okNewPassWord <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newPassWord<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>okNewPassWord<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    acc<span class="token punctuation">.</span><span class="token function">setPassWord</span><span class="token punctuation">(</span>newPassWord<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码修改成功，请重新登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新密码不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"旧密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                <span class="token comment">//销户</span>                accounts<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销户成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目分享"><a href="#项目分享" class="headerlink" title="项目分享"></a>项目分享</h2><p>项目已上传到我的GitHub<a href="https://github.com/limitlm/AtmSystem" title="欢迎访问">仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第9天</title>
      <link href="/posts/1901.html"/>
      <url>/posts/1901.html</url>
      
        <content type="html"><![CDATA[<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="String概述"><a href="#String概述" class="headerlink" title="String概述"></a>String概述</h3><ul><li>java.lang.String类代表字符串，String类定义的变量可以用于指向字符串对象，然后操作该字符串。</li><li>Java程序中所有双引号标注的对象都可以认为是字符串对象。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"泷少"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="String类的特点详情"><a href="#String类的特点详情" class="headerlink" title="String类的特点详情"></a>String类的特点详情</h3><ul><li>String其实常被称为不可变字符串类型，它的对象在创建后不能被更改。<br>（字符常量池中，已创建的对象不变，栈中的地址指向更新，给人一种字符串对象更新了的错觉）</li></ul><h3 id="创建字符串的2种方式"><a href="#创建字符串的2种方式" class="headerlink" title="创建字符串的2种方式"></a>创建字符串的2种方式</h3><ol><li>直接用双引号定义（<code>推荐</code>）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"泷少"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.使用String类构造器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"泷少"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="两者区别（面试题）"><a href="#两者区别（面试题）" class="headerlink" title="两者区别（面试题）"></a>两者区别（面试题）</h4><ul><li>双引号创建的字符串，在字符串常量池中，相同内容只会存储一份（为了节约内存资源）。</li><li>构造器new的字符串，每次new都会在堆内存中开辟新的空间，相同内容也是不同的对象，在栈内存中保存的地址也不同。</li></ul><h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> s2 <span class="token operator">+</span> <span class="token string">"c"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span> <span class="token operator">+</span> <span class="token string">"c"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true</span><span class="token comment">//因为Java存在编译优化机制，编译时"a" + "b" + "c"自动编译成"abd"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String类常用API"><a href="#String类常用API" class="headerlink" title="String类常用API"></a>String类常用API</h3><table><thead><tr><th align="center">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">equals</td><td align="left">将此字符串与指定对象进行比较，只关心字符内容是否一致</td></tr><tr><td align="center">equalsIgnoreCase</td><td align="left">将此字符串与指定对象进行比较，<strong>忽略大小写</strong>，只关心字符内容是否一致</td></tr><tr><td align="center">length</td><td align="left">返回字符串长度</td></tr><tr><td align="center">charAt</td><td align="left">返回某个索引位置处的字符</td></tr><tr><td align="center">toCharArray</td><td align="left">将字符串转换成字符数组再返回</td></tr><tr><td align="center">subString(index,end)</td><td align="left">根据开始和结束索引截取，返回新字符串（包前不包后）</td></tr><tr><td align="center">replace(旧,新)</td><td align="left">使用新值替换旧值，得到新的字符串（违禁词变*号）</td></tr><tr><td align="center">split</td><td align="left">根据传入的规则切割字符串，得到字符串数组返回</td></tr><tr><td align="center">contains(内容)</td><td align="left">判断字符串中是否包含内容，返回布尔值</td></tr><tr><td align="center">startWith(内容)</td><td align="left">判断字符串中是否以内容开头，返回布尔值</td></tr></tbody></table><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h3><p>集合与数组类似，也是一种容器，用于装数据的<br>数组定义后，<strong>类型确定</strong>，<strong>长度固定</strong><br>在个数不确定的情况下，数组不方便做增删操作<br>集合的大小不固定，可以动态变化，类型也可以选择不固定</p><h3 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><p>ArrayList是集合的一种，他支持索引</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"C#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>支持泛型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>注意：集合中只能存储引用类型，不能存储基本数据类型</code></p><h3 id="ArrayList类常用API"><a href="#ArrayList类常用API" class="headerlink" title="ArrayList类常用API"></a>ArrayList类常用API</h3><table><thead><tr><th align="center">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">get</td><td align="left">返回指定索引处的元素</td></tr><tr><td align="center">size</td><td align="left">返回集合中的元素个数</td></tr><tr><td align="center">remove(index)</td><td align="left">删除指定索引处的元素，返回被删除的元素</td></tr><tr><td align="center">remove(Object)</td><td align="left">删除指定元素，返回是否删除成功（有相同元素时，默认只删第一次出现的那个元素）</td></tr><tr><td align="center">set(index,element)</td><td align="left">修改指定索引处的元素，返回被修改的元素</td></tr></tbody></table><h3 id="遍历删除元素"><a href="#遍历删除元素" class="headerlink" title="遍历删除元素"></a>遍历删除元素</h3><p>从集合<strong>后面</strong>遍历删除，可以避免漏元素。</p><h3 id="存储自定义类型"><a href="#存储自定义类型" class="headerlink" title="存储自定义类型"></a>存储自定义类型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"泷少"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>集合存储的对象并不是对象本身，而是对象的地址。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第8天</title>
      <link href="/posts/64364.html"/>
      <url>/posts/64364.html</url>
      
        <content type="html"><![CDATA[<h2 id="static详解"><a href="#static详解" class="headerlink" title="static详解"></a>static详解</h2><h3 id="static属性和方法"><a href="#static属性和方法" class="headerlink" title="static属性和方法"></a>static属性和方法</h3><p>静态属性和静态方法可以直接类名调用，不需要初始化对象。</p><h3 id="static代码块"><a href="#static代码块" class="headerlink" title="static代码块"></a>static代码块</h3><p>在new一个对象时，先执行类中静态代码块，再执行匿名代码块，然后才是执行构造方法。<br>静态代码块仅会执行一次。后续再new一个对象也不会执行了。</p><h3 id="静态导入包"><a href="#静态导入包" class="headerlink" title="静态导入包"></a>静态导入包</h3><p>在导包时加上static和具体包内方法名，在下面写代码时就不需要加包名了。<br>例如：import static java.lang.math.random<br>本来调用时应该写math.random的，静态导入包后只需要直接写random就行了。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>abstract修饰方法，那么该方法就是抽象方法，如果修饰类，那么这个类就是抽象类。</li><li>抽象类可以没有抽象方法，但是有抽象方法的类必须声明为抽象类。</li><li>抽象类不能用new生成对象，只能用来让子类继承。</li><li>抽象方法只有方法的声明，没有方法的实现，它是用来让子类实现的。</li><li>子类继承抽象类，那么一定要实现抽象类中没实现的抽象方法，否则该子类也要声明为抽象类。</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>普通类：只有具体实现<br>抽象类：具体实现和抽象方法都有<br>接口：只有规范！</p><ul><li>接口是规范，定义规则：“如果你是……，则必须能……”。  “如果是飞机，则必须会飞。”</li><li>声明类的关键字是<code>class</code>，声明接口的关键字是<code>interface</code>  </li><li>实现接口的关键字是<code>implements</code>，</li><li>接口可以多继承。</li><li>接口不能被new实例化，接口没有构造方法。</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>错误类由jvm产生抛出，通常情况下与代码编写者的操作无关。<br>如，内存不足以运行程序、类定义错误、链接错误</p><h3 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h3><ul><li>运行时异常<ul><li>数组下标越界</li><li>空指针异常</li><li>算数异常</li><li>丢失资源</li><li>找不到异常（这些是不检查异常，程序中可以捕获异常也可以不做处理）</li></ul></li><li>一般由程序逻辑错误引起的</li><li>区别：error是致命错误，程序无法处理，直接终止线程，exception是异常，程序可以处理，写代码的时候可以捕获异常并作出处理。</li></ul><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><p>一般情况下<strong>try{代码监控区}catch{捕获异常}finally{处理异常}</strong><br>try和catch配合使用，finally可以不用写。<br>如果要捕获多个异常，需要从小到大捕获。<br>idea快捷键<code>Ctrl + Alt + T</code></p><p>throw和throws抛出异常。</p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>定义一个类，继承exception类<br><em><strong>暂时用不着，后续待补充</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第7天</title>
      <link href="/posts/61295.html"/>
      <url>/posts/61295.html</url>
      
        <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li><strong>该露的露，该藏的藏</strong><ul><li>程序设计追求<code>“高内聚，低耦合”</code>。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合指仅暴露少量的方法给外部使用。</li></ul></li><li>封装（数据的隐藏）<ul><li>通常应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li></ul></li></ul><p>属性私有，方法公开：private、public、get/set</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Java中只有单继承没有多继承.<br>继承关系的俩个类，一个为子类(派生类).一个为父类(基类)。子类继承父类,使用关键字<code>extends</code>来表示。<br>子类继承父类的属性和方法，但是不能直接访问父类的私有属性。<br>Object类是所有类的父类。</p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>super();调用父类的构造方法，必须在子类的构造方法的第一个，不写也会隐式添加。<br>super()和this()不能同时出现在子类的构造方法中。</p><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>这些方法不能被重写：</p><ol><li>static方法。属于类,它不属于实例</li><li>final常量</li><li>private方法</li></ol><p>方法的重写只跟方法有关，跟属性无关。<br>假设B类继承自A类，print是静态方法：<br>A a = new A();<br>B b = new A();<br>a.print();//调用A类的方法<br>b.print();//调用B类的方法<br>说明静态方法的调用只和左边的类有关。<br>非静态方法，使用override重写，调用的是右边对象的方法。</p><p>重写需要有继承关系。子类重写父类的方法。</p><ol><li>方法名必须相同</li><li>参数列表列表必须相同</li><li>修饰符范围可以扩大但不能缩小public&gt;protected&gt;Default&gt;private</li><li>抛出的异常范围,可以被缩小，但不能扩大:</li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。<br>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多。<br>多态存在的条件：</p><ul><li>有继承关系  </li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul><p>注意:多态是方法的多态，属性没有多态性。  </p><h3 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h3><p>instanceof判断两个类是否有上下级继承关系，返回布尔类型。<br>类型转换：</p><ol><li>父类引用指向子类对象</li><li>把子类转换为父类。向上转型，可能会丢失方法</li><li>把父类转换为子类。向下转型:强制转换</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第6天</title>
      <link href="/posts/4974.html"/>
      <url>/posts/4974.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组是相同类型的数据的有序集合</li><li>其中每一个数据称作数组元素，每个数组元素可以通过下标访问他们</li></ul><h3 id="数组的声明创建"><a href="#数组的声明创建" class="headerlink" title="数组的声明创建"></a>数组的声明创建</h3><p>声明数组变量的语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar<span class="token punctuation">;</span><span class="token comment">//首选方法</span>或dataType arrayRefVar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//效果相同，非首选方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Java语言使用new关键字来创建数组，语法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar <span class="token operator">=</span> <span class="token keyword">new</span> dataType<span class="token punctuation">[</span>arraySize<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组的元素通过索引（下标）来访问，从0开始<br>获取数组长度： array.length<br>在栈中声明，new在堆中开辟空间</p><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><p>静态初始化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>动态初始化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>赋值一个元素后，其他元素隐式赋值，默认值为0。</p><h3 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h3><ol><li>长度确定，一旦被创建，大小无法改变</li><li>元素类型必须相同，不能出现混合类型</li><li>元素可以是任何类型，包括基本类型和引用类型</li><li>数组变量属于引用类型，可以看成是对象，元素相当于对象的成员变量</li></ol><h3 id="数组的边界"><a href="#数组的边界" class="headerlink" title="数组的边界"></a>数组的边界</h3><p>0 ~ 数组长度-1<br>下标越界异常：<br>java.lang.ArrayIndexOutOfBoundsException</p><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><p>普通for循环遍历数组<br>for……each遍历数组</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>二维数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二维数组相当于一个一维数组，它的每个元素也是一个一维数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二维数组的遍历：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x <span class="token operator">:</span> a    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">:</span> x        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三维数组就是每个元素都是一个二维数组……套娃</p><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>Arrays.toString()<br>打印数组元素</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>Arrays.sort()<br>升序排序</p><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p>Arrays.fill(数组对象,值)<br>Arrays.fill(数组对象,起始索引,结束索引,值)<br>填充元素赋值</p><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p>比较数组</p><h4 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch"></a>binarySearch</h4><p>对排序好的数组进行二分查找</p><h3 id="八大排序"><a href="#八大排序" class="headerlink" title="八大排序"></a>八大排序</h3><p>详情见我写的另一篇文章<a href="https://www.cnblogs.com/morethink/p/8419151.html">八大排序算法</a></p><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><p>当一个数组大部分元素为0或同一个值时，可以使用稀疏数组来保存<br>稀疏数组的处理方式：</p><ol><li>记录有几行几列有几个不同值</li><li>记录不同值的索引和具体值</li></ol><p>案例：假设有个11*11的棋盘，只有某几个位置有棋子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparseArray</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个二维数组 11*11   0：没有棋子， 1：黑棋， 2：白棋</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原数组为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//转化为稀疏数组</span>        <span class="token comment">//先获取有效值的个数</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sum <span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有效值的个数为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建稀疏数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>         <span class="token comment">//遍历二维数组，将非0的值存放到稀疏数组</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    b<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    b<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    b<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稀疏数组为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还原数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//读取稀疏数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">//还原数组的值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>b<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还原数组为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i<span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">:</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li><p>面向对象编程(Object-Oriented Programming, OOP)  </p></li><li><p>面向对象编程的本质就是:以类的方式组织代码，以对象的组织(封装)数据。</p></li><li><p>抽象</p></li><li><p>三大特性：  </p><ul><li>封装</li><li>继承</li><li>多态</li></ul></li><li><p>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象  </p></li><li><p>从代码运行角度考虑是先有类后有对象。类是对象的模板。</p></li></ul><h3 id="方法回顾"><a href="#方法回顾" class="headerlink" title="方法回顾"></a>方法回顾</h3><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>用static修饰的方法<br>可以直接用  <code>类名.方法名()</code> 调用</p><h4 id="非静态方法"><a href="#非静态方法" class="headerlink" title="非静态方法"></a>非静态方法</h4><p>没有用static修饰的方法<br>需要先实例化对象才能调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">GirlFriend</span> gl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gl<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h3><p>使用new关键字创建对象，除了分配内存空间外还会给创建好的对象进行初始化以及对类中的构造方法的调用。<br>构造方法的特点：</p><ol><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ol><p>什么都不写的时候，默认会提供一个无参构造方法。<br>一个类可以有多个构造方法。构造方法也能重载。<br>构造方法相当于给对象初始化的时候赋予对象初始值。<br>快捷键Alt + Insert创建构造方法。</p><h3 id="创建对象内存分析"><a href="#创建对象内存分析" class="headerlink" title="创建对象内存分析"></a>创建对象内存分析</h3><p>在栈中的保存的是对象的引用变量名，真正的对象在堆中，根据类为模板生成对象，根据构造方法给对象赋予初始属性。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第5天</title>
      <link href="/posts/22382.html"/>
      <url>/posts/22382.html</url>
      
        <content type="html"><![CDATA[<h2 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h2><ul><li>可以通过Scanner类获取用户输入</li><li>基本语法：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>通过Scanner类的next()和nextLine()方法获取输入的字符串，在读取前一般需要使用hasNext()与hasNextLine()判断是否还有输入的数据。</li></ul><h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><ol><li>一定要读取到字符后才可以结束输入。</li><li>对输入有效字符前遇到的空白，next()方法会自动将其去掉。</li><li>只有输入有效字符后才将其后面的空白作为分隔符或者结束符。</li><li><code>next()不能得到带有空格的字符串。</code></li></ol><h3 id="nextLine"><a href="#nextLine" class="headerlink" title="nextLine()"></a>nextLine()</h3><ol><li>以Enter为结束符，返回输入回车前的所有字符。</li><li>可以获取空白。</li></ol><h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><p>每次使用完Scanner类记得Scanner.close();<br>可以节约内存。</p><h3 id="对数据类型要求"><a href="#对数据类型要求" class="headerlink" title="对数据类型要求"></a>对数据类型要求</h3><p>例如：<br>nextInt();要求输入整数，对应的有hasNextInt();<br>nextFloat();要求输入小数，对应的有hasNextFloat();<br>以此类推……</p><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>按照顺序依次执行</p><h2 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h2><h3 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果布尔表达式为true时要执行的语句</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="if双选择结构"><a href="#if双选择结构" class="headerlink" title="if双选择结构"></a>if双选择结构</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果布尔表达式为true时要执行的语句</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token comment">//如果布尔表达式为false时要执行的语句</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果布尔表达式1为true时要执行的语句</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果布尔表达式2为true时要执行的语句</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果布尔表达式3为true时要执行的语句</span>  ……  ……  ……<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token comment">//如果以上所有布尔表达式为false时要执行的语句</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套的if结构"><a href="#嵌套的if结构" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h3><p>允许套娃</p><h3 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h3><p>switch case语句判断一个变量与一系列值中的某个值是否相等，每个值称为一个分支。<br>变量类型可以是byte、short、int、char或者字符串。</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入其他"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>循环条件布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//循环体执行的语句</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只要布尔表达式的值为true就会一直执行<br>应该避免死循环</p><h3 id="do……while循环"><a href="#do……while循环" class="headerlink" title="do……while循环"></a>do……while循环</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment">//循环体执行的语句</span>    <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>循环条件布尔表达式<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>区别在于会至少会先执行 <strong><code>1次</code></strong> 后，再判断是否循环执行</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>已知循环次数的情况下选for循环<br>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span>布尔表达式<span class="token punctuation">;</span>迭代<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//执行的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>for循环可以嵌套</p><p>示例九九乘法表：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>j<span class="token operator">*</span>i<span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><p>一般用来遍历数组<br>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句<span class="token operator">:</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//执行的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例遍历数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>break结束整个循环<br>continue退出本次循环</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Java方法是语句的集合，它们在一起执行一个功能。<br>一个方法只完成1个功能，有利于后期的扩展。</p><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><ul><li>修饰符：可选如public</li><li>返回值类型：如void</li><li>方法名：驼峰原则命名</li><li>参数类型：<ul><li>形参：在方法被调用时用于接收外界输入的数据</li><li>实参：调用方法时实际传递给方法的数据</li></ul></li><li>方法体：方法体具体语句，实现方法的功能</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>    ……    方法体    ……    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><p>有返回值的当作赋值变量来传参调用<br>无返回值的直接调用</p><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数</p><p>方法重载的规则：</p><ul><li>方法名称必须相同</li><li>参数列表必须不同（个数不同或类型不同，排列不同也算）</li><li>方法的返回类型可以相同也可以不同</li><li>仅仅返回类型不同不足以成为方法的重载</li></ul><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>在方法声明中，在指定参数类型后加一个…号。<br>可变参数必须是方法的最后一个参数</p><h3 id="方法的递归调用"><a href="#方法的递归调用" class="headerlink" title="方法的递归调用"></a>方法的递归调用</h3><p>递归就是方法自己调用自己<br>递归结构包括两部分：</p><ul><li>递归头：什么时候不调用自身方法，如果没有递归头将陷入死循环</li><li>递归体：什么时候需要调用自身方法</li></ul><p>常用与阶乘：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第4天</title>
      <link href="/posts/43887.html"/>
      <url>/posts/43887.html</url>
      
        <content type="html"><![CDATA[<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>原则上是低———-&gt;高<br>byte,short,char-&gt;int-&gt;long-&gt;float-&gt;double<br>运算中，不同类型的数据先转化为同一类型，然后再进行运算<br><strong>注意数据溢出问题</strong></p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>高—–&gt;低<br>在数据前面加上(数据类型)</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//可以用下划线_分割数字，不改变大小</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10_0000_0000</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> c1<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token keyword">long</span> c2<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token keyword">long</span> c3<span class="token operator">=</span>a<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出负数溢出了</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出还是负数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出正常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明是先计算再赋值，先计算结果溢出了，赋值给long类型的c还是溢出后的结果</p><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>低—–&gt;高<br>(int)1.1;<br>//输出1</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量就是可以变化的量<br>局部变量必须声明初始值  </p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量初始化后不能变化<br>final 常量名=值<br>常量名一般用大写</p><h2 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h2><ol><li>所有变量、方法、类名：用英语，见名知意</li><li>类成员变量：首字母小写和驼峰原则：monthSalary</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：大写字母和下划线：MAX_VALUE</li><li>类名：首字母大写和驼峰原则：Man、GoodMan</li><li>方法名：首字母小写和驼峰原则：run()，runRun()</li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算术运算符：+，-，*，/，%，++，–</li><li>赋值运算符：=</li><li>关系运算符：&gt;，&lt;，&gt;=，&lt;=，==，!=instanceof</li><li>逻辑运算符：&amp;&amp;，||，!</li><li>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;（了解）</li><li>条件运算符?，:</li><li>扩展赋值运算符：+=，-=，*=，/=</li></ul><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>int a = 3;<br>int b = a++;<br>//先赋值再自增，此时a=4，b=3<br>int c = ++a;<br>//先自增再赋值，此时a=5，c=5</p><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>int a = 1;<br>int b = 2;<br>int c = a&gt;b?a:b;<br>//a&gt;b为true则c=a=1；否则c=b=2；</p><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><ul><li>为了更好的组织类，Java提供了包机制，用于区别类名的命名空间  </li><li>包语句的语法格式为：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pkg1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>pkg2<span class="token punctuation">[</span><span class="token punctuation">.</span>pkg3…<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong><code>一般利用公司域名倒置作为包名：com.xxx.xxx</code></strong></li><li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包，使用import语句可完成此功能</li></ul><pre><code class="java">import pkg1[.pkg2…].(classname|*);</code></pre><h2 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h2><ul><li>javadoc命令是用来生成自己API文档的</li><li>生成html文件</li></ul><h3 id="参数信息"><a href="#参数信息" class="headerlink" title="参数信息"></a>参数信息</h3><ul><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明需要最早使用的jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事必先利其器1</title>
      <link href="/posts/8983.html"/>
      <url>/posts/8983.html</url>
      
        <content type="html"><![CDATA[<h2 id="自用的Idea插件"><a href="#自用的Idea插件" class="headerlink" title="自用的Idea插件"></a>自用的Idea插件</h2><p>很多优秀的插件确实能大幅提升效率，省去安装其他软件的臃肿问题</p><hr><h3 id="1-Chinese-Simplified-Language-Pack-中文语言包"><a href="#1-Chinese-Simplified-Language-Pack-中文语言包" class="headerlink" title="1.Chinese(Simplified)Language Pack/中文语言包"></a>1.Chinese(Simplified)Language Pack/中文语言包</h3><blockquote><p>官方中文汉化包，适合刚接触Idea且英语不好的开发者。<br>中文语言包将为您的 IntelliJ IDEA, AppCode, CLion, DataGrip, GoLand, PyCharm, PhpStorm, RubyMine, 和WebStorm 带来完全中文化的界面。</p></blockquote><h3 id="2-Ide-Eval-Reset"><a href="#2-Ide-Eval-Reset" class="headerlink" title="2.Ide Eval Reset"></a>2.Ide Eval Reset</h3><blockquote><p>暂时没钱入正，靠这个插件重置30天试用期续命。<br>登录账号试用IDE，安装设置好本插件，退出登录账号重启IDE即可。<br>市场付费插件的试用信息也会一并重置。<br><code>MyBatisCodeHelperPro (Marketplace Edition)</code>可重置！<br>安装方式比较特殊，官方的插件商店肯定搜不到。<br>详情见<a href="https://zhile.io/2020/11/18/jetbrains-eval-reset-da33a93d.html">原作者博客文章</a>  </p></blockquote><p><code>IDEA_2021.3已经彻底不支持离线试用，本重置插件已失效。可以考虑暂缓升级至2021.3！</code></p><h3 id="3-Translation"><a href="#3-Translation" class="headerlink" title="3.Translation"></a>3.Translation</h3><blockquote><p>字面意思，一个翻译插件。<br>设置里面可以配置自己的百度开发者翻译引擎。<br>使用说明：选中单词，鼠标右键“翻译”。或者快捷键Ctrl + Shift + Y<br>详细说明请参考官方文档<a href="https://yiiguxing.github.io/TranslationPlugin/start.html">开始使用</a></p></blockquote><h3 id="4-Rainbow-Brackets"><a href="#4-Rainbow-Brackets" class="headerlink" title="4.Rainbow Brackets"></a>4.Rainbow Brackets</h3><blockquote><p>彩虹括号。效果预览如下：<br><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202112010829732.png" alt="RainbowBrackets预览图"><br>方便区分括号层级。</p></blockquote><h3 id="5-Free-MyBatis-plugin"><a href="#5-Free-MyBatis-plugin" class="headerlink" title="5.Free MyBatis plugin"></a>5.Free MyBatis plugin</h3><blockquote><p>free-idea-mybatis是一款增强idea对mybatis支持的插件，主要功能如下：</p><ul><li>生成mapper xml文件</li><li>快速从代码跳转到mapper及从mapper返回代码</li><li>mybatis自动补全及语法错误提示</li><li>集成mybatis generator gui界面</li><li>根据数据库注解，生成swagger model注解</li></ul></blockquote><h3 id="6-MyBatisCodeHelperPro-Marketplace-Edition"><a href="#6-MyBatisCodeHelperPro-Marketplace-Edition" class="headerlink" title="6.MyBatisCodeHelperPro (Marketplace Edition)"></a>6.MyBatisCodeHelperPro (Marketplace Edition)</h3><blockquote><ul><li>用Ide Eval Reset可以重置试用期限</li><li>和其他mybatis插件冲突不能同时启用</li><li>功能很强大，但我暂时用不明白</li><li>有空去看看原作者在b站发的教学视频</li></ul></blockquote><iframe src="//player.bilibili.com/player.html?aid=83628121&amp;bvid=BV1iJ41177GK&amp;cid=143067415&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="7-RestfulTool"><a href="#7-RestfulTool" class="headerlink" title="7.RestfulTool"></a>7.RestfulTool</h3><blockquote><p>一套 Restful 服务开发辅助工具集</p><ol><li>提供了一个 Services tree 的显示窗口</li><li>双击 URL 直接跳转到对应的方法定义</li><li>一个简单的 http 请求工具</li><li>支持 Spring 体系 (Spring MVC / Spring Boot)</li><li>支持 JAX-RS</li><li>支持 <code>Navigate -&gt; Request Service</code> 搜索 Mapping (Ctrl + Alt + /)</li></ol><p>自带接口调试功能，虽然不能像PostMan一样保存调试的记录。但我还是卸载了PostMan选择了这个，因为这个插件精简且不占空间。</p></blockquote><h3 id="8-Maven-Helper"><a href="#8-Maven-Helper" class="headerlink" title="8.Maven Helper"></a>8.Maven Helper</h3><blockquote><p>一键查看maven依赖树，查看冲突的依赖.</p><ul><li>分析和排除冲突依赖关系的简便方法</li><li>为包含当前文件的模块或根模块运行/调试maven目标的操作</li><li>在当前maven模块路径上打开终端的操作</li><li>运行/调试当前测试文件的操作。</li></ul><p>用法：</p><ul><li>在编辑器中单击鼠标右键|运行Maven</li><li>在项目视图工具栏中单击鼠标右键|（运行|调试）Maven</li><li>CTRL+ALT+R-“运行Maven目标”弹出窗口（您可以在弹出窗口中使用Delete&gt;- 键）</li><li>CTRL+SHIFT+ALT+R-“在根模块上运行Maven目标”弹出窗口（您可以在弹出窗口中使用Delete键）</li><li>自定义目标：设置|其他设置| Maven助手</li><li>定义快捷方式：设置|键映射|插件| Maven助手</li><li>打开pom文件，单击“依赖项分析器”选项卡，右键单击树中的上下文操作。</li></ul></blockquote><h3 id="9-Key-Promoter-X"><a href="#9-Key-Promoter-X" class="headerlink" title="9.Key Promoter X"></a>9.Key Promoter X</h3><blockquote><ul><li>快捷键提示</li><li>当你执行一个操作没使用快捷键时会提示你</li><li>每次提示都会留下记录</li><li>会推荐你很多次都没使用过的快捷键</li><li>对于不熟悉快捷键的用户很有必要安装</li><li>提示的快捷键是根据当前设置的keymap来的</li></ul></blockquote><h3 id="10-CodeGlance3"><a href="#10-CodeGlance3" class="headerlink" title="10.CodeGlance3"></a>10.CodeGlance3</h3><blockquote><ul><li>类似sublime的代码缩略图</li><li>在右边生成小地图，可以拖动快速定位区域</li></ul></blockquote><h3 id="11-Alibaba-Java-Coding-Guidelines"><a href="#11-Alibaba-Java-Coding-Guidelines" class="headerlink" title="11.Alibaba Java Coding Guidelines"></a>11.Alibaba Java Coding Guidelines</h3><blockquote><ul><li>阿里巴巴的Java规范</li><li>可以扫描当前项目或当前文件</li><li>可以实时监控并提示</li><li>想写好规范的Java代码，养成良好的代码风格请务必安装</li></ul></blockquote><h3 id="12-Codota"><a href="#12-Codota" class="headerlink" title="12.Codota"></a>12.Codota</h3><blockquote><ul><li>比IDEA更好的代码补全（针对Java和JavaScript）</li><li>可以在线搜索GitHub上的代码片段</li><li>也可以AI学习本地项目（看你是否同意授权上传本地代码）</li><li>官方正在大力推荐他们的新代码补全插件TabNine</li><li>TabNine支持更多编程语言，而且AI学习更强大，但是内存占用太大了</li><li>平时只写Java用Codota就够了</li></ul></blockquote><h3 id="13-Easy-Code"><a href="#13-Easy-Code" class="headerlink" title="13.Easy Code"></a>13.Easy Code</h3><blockquote><ul><li>基于IntelliJ IDEA开发的代码生成插件，支持自定义任意模板（Java，html，js，xml）。</li><li>只要是与数据库相关的代码都可以通过自定义模板来生成。支持数据库类型与java类型映射关系配置。</li><li>支持同时生成生成多张表的代码。每张表有独立的配置信息。完全的个性化定义，规则由你设置。  </li></ul><p><code>其实就是根据数据库生成controller、dao、entity、mapper、service等文件</code><br>界面如下：<br><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202112040434994.png" alt="Easy Code界面"></p></blockquote><h3 id="14-GsonFormatPlus"><a href="#14-GsonFormatPlus" class="headerlink" title="14.GsonFormatPlus"></a>14.GsonFormatPlus</h3><blockquote><ul><li>一个可以将json数据格式化的插件</li><li>格式化后可以直接生成Java成员变量</li><li>快捷键是Alt + S</li><li>平时可能不用但是关键时刻不能没有的插件</li><li>反正是离线版的小插件，长期开启也没影响</li></ul></blockquote><h3 id="15-Dracula-Theme"><a href="#15-Dracula-Theme" class="headerlink" title="15.Dracula Theme"></a>15.Dracula Theme</h3><blockquote><p>最后推荐个好看的主题，不会太亮也不会太暗，色彩很炫酷。<br>代码高亮的搭配也让人很容易集中注意力。<br>我在VSCode上也是用的这个主题。<br>实在用不习惯下载量最高的OneDark（太暗了！）<br><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202112040451806.png" alt="Dracula Theme在IDEA中的预览"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第3天</title>
      <link href="/posts/57198.html"/>
      <url>/posts/57198.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>按照学校要求，去参加为期6天的企业开发实训<br>课程包括鸿蒙开发和Java的spring boot + mybatis项目开发<br>好忙啊，暂时停更</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第2天</title>
      <link href="/posts/9071.html"/>
      <url>/posts/9071.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>Java的数据类型分为两大类：<strong>基本类型</strong>和<strong>引用类型</strong></p></blockquote><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><blockquote><p>基本类型分为两大类：<em><strong>数值类型</strong></em> 和 <em><strong>boolean类型</strong></em></p></blockquote><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><blockquote><p>数值类型分为三大类：<code>整数类型</code>、<code>浮点类型</code>和<code>字符类型</code></p></blockquote><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><ol><li>byte占一个字节 范围-128到127</li><li>short占2个字节 范围-32768到32767</li><li>int占4个字节 范围-2147483648到2147483647</li><li>long占8个字节 范围-9223372036854775808到9223372036854775807</li></ol><h5 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h5><ol><li>float占4个字节</li><li>double占8个字节</li></ol><h4 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h4><p>占一位，其值只有<code>true</code>和<code>false</code>两个</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ol><li>类</li><li>接口</li><li>数组</li></ol><hr><blockquote><p><em><strong>在Java中，String字符串不是基本类型</strong></em></p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量就是可以变化的量</li><li>Java是一种强类型语言，每个变量都必须声明其类型</li><li>Java变量是程序中最基本的储存单元，其要素包括变量名，变量类型和作用域</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">type varName [=value] [{,varName[=value]}];  //数据类型 变量名 = 值：可以使用逗号隔开来声明多个同类型变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意事项：</p><ul><li>每个变量都有类型，类型可以是基本型，也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</li></ul><h2 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h2><ul><li>位（bit）：是计算机内部数据储存的最小单位，11001100是一个八位二进制数</li><li>字节（byte）：是计算机中数据处理的基本单位，习惯上用大写B来表示</li><li>1B（byte，字节） = 8bit（位）</li><li>字符：是指计算机中使用的字母，数字，字和符号</li></ul><hr><ul><li>1bit表示1位</li><li>bByte表示一个字节 1B=8b</li><li>1024B=1KB</li><li>1024KB=1MB</li><li>1024MB=1GB</li></ul><h2 id="数据类型扩展"><a href="#数据类型扩展" class="headerlink" title="数据类型扩展"></a>数据类型扩展</h2><h3 id="整数拓展：进制"><a href="#整数拓展：进制" class="headerlink" title="整数拓展：进制"></a>整数拓展：进制</h3><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><p>Java中一般不使用二进制，但是可以以0b开头表示二进制数</p><h4 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h4><p>int i = 010;<br>输出8</p><h4 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h4><p>int i = 10;<br>输出10</p><h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><p>int i = 0x10;<br>输出16</p><h3 id="浮点数扩展"><a href="#浮点数扩展" class="headerlink" title="浮点数扩展"></a>浮点数扩展</h3><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><p>float f = 0.1f</p><h4 id="double"><a href="#double" class="headerlink" title="double"></a>double</h4><p>double d = 1.0/10<br><strong>不要使用浮点数进行比较</strong></p><h3 id="字符扩展"><a href="#字符扩展" class="headerlink" title="字符扩展"></a>字符扩展</h3><p>字符的本质还是数字<br>可以int强制类型转换<br>Unicode编码占2字节</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1<span class="token operator">=</span><span class="token char">'a'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2<span class="token operator">=</span><span class="token char">'\u0061'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出97</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>\t 制表符<br>\n 换行符</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"hello，world"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出hello，world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="布尔值扩展"><a href="#布尔值扩展" class="headerlink" title="布尔值扩展"></a>布尔值扩展</h3><p>Boolean值只有true和false<br>用于条件判断<br>注意：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//选第二种，不要画蛇添足</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的第1天</title>
      <link href="/posts/26479.html"/>
      <url>/posts/26479.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础01：注释"><a href="#Java基础01：注释" class="headerlink" title="Java基础01：注释"></a>Java基础01：注释</h2><p>注释不会被执行，给程序员看的，方便维护。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><blockquote><p>//单行注释</p></blockquote><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><blockquote><p>/*多行<br>注释*/</p></blockquote><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>JavaDoc</p><blockquote><p>/**<br>  *@description<br>  *@author<br>  */</p></blockquote><h2 id="Java基础02：标识符和关键字"><a href="#Java基础02：标识符和关键字" class="headerlink" title="Java基础02：标识符和关键字"></a>Java基础02：标识符和关键字</h2><p>详情看站内文章</p><p>&nbsp;<a href="https://limitlm.github.io/posts/48874.html">Java关键字</a></p><h3 id="标识符注意点"><a href="#标识符注意点" class="headerlink" title="标识符注意点"></a>标识符注意点</h3><ul><li>所有标识符应该以字母A-Z或a-z，美元符号$，或者下划线_开始</li><li>首字符之后可以是字母A-Z或a-z，美元符号$，或者下划线_或数字的任意字母组合</li><li><code>不能使用关键字作为变量名或方法名</code></li><li>标识符是大小写敏感的</li><li>合法标识符举例</li><li><blockquote><p>age、$salary、_value、_1_value</p></blockquote></li><li>非法标识符举例</li><li><blockquote><p>123abc、-salary、#abc</p></blockquote></li><li><code>可以使用中文命名，但是一般不建议这样做，也不建议用拼音，很low</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java关键字</title>
      <link href="/posts/48874.html"/>
      <url>/posts/48874.html</url>
      
        <content type="html"><![CDATA[<h3 id="详细了解关键字："><a href="#详细了解关键字：" class="headerlink" title="详细了解关键字："></a>详细了解关键字：</h3><h4 id="1-访问控制"><a href="#1-访问控制" class="headerlink" title="1.&nbsp;访问控制"></a>1.&nbsp;访问控制</h4><ol><li><p>private&nbsp;私有的<br>private&nbsp;关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。&nbsp;只能在声明&nbsp;private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。&nbsp;所有类成员的默认访问范围都是&nbsp;package&nbsp;访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p></li><li><p>protected&nbsp;受保护的<br>protected&nbsp;关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。可以在声明&nbsp;protected&nbsp;类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。所有类成员的默认访问范围都是&nbsp;package&nbsp;访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p></li><li><p>public&nbsp;公共的<br>public&nbsp;关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。&nbsp;可能只会在其他任何类或包中引用&nbsp;public&nbsp;类、方法或字段。所有类成员的默认访问范围都是&nbsp;package&nbsp;访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p></li></ol><h4 id="2-类、方法和变量修饰符"><a href="#2-类、方法和变量修饰符" class="headerlink" title="2.&nbsp;类、方法和变量修饰符"></a>2.&nbsp;类、方法和变量修饰符</h4><ol><li><p>abstract&nbsp;声明抽象<br>abstract关键字可以修改类或方法。abstract类可以扩展（增加子类），但不能直接实例化。abstract方法不在声明它的类中实现，但必须在某个子类中重写。采用&nbsp;abstract方法的类本来就是抽象类，并且必须声明为abstract。</p></li><li><p>class类<br>class&nbsp;关键字用来声明新的&nbsp;<a href="http://lib.csdn.net/base/17">Java</a>&nbsp;类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用&nbsp;new&nbsp;操作符将类的对象实例化，然后调用类的方法来访问类的功能。</p></li><li><p>extends&nbsp;继承、扩展<br>extends&nbsp;关键字用在&nbsp;class&nbsp;或&nbsp;interface&nbsp;声明中，用于指示所声明的类或接口是其名称后跟有&nbsp;extends&nbsp;关键字的类或接口的子类。子类继承父类的所有&nbsp;public&nbsp;和&nbsp;protected&nbsp;变量和方法。&nbsp;子类可以重写父类的任何非&nbsp;final&nbsp;方法。一个类只能扩展一个其他类。</p></li><li><p>final&nbsp;最终、不可改变<br>final&nbsp;关键字可以应用于类，以指示不能扩展该类（不能有子类）。final&nbsp;关键字可以应用于方法，以指示在子类中不能重写此方法。一个类不能同时是&nbsp;abstract&nbsp;又是&nbsp;final。abstract&nbsp;意味着必须扩展类，final&nbsp;意味着不能扩展类。一个方法不能同时是&nbsp;abstract&nbsp;又是&nbsp;final。abstract&nbsp;意味着必须重写方法，final&nbsp;意味着不能重写方法。</p></li><li><p>implements实现<br>implements&nbsp;关键字在&nbsp;class&nbsp;声明中使用，以指示所声明的类提供了在&nbsp;implements&nbsp;关键字后面的名称所指定的接口中所声明的所有方法的实现。类必须提供在接口中所声明的所有方法的实现。一个类可以实现多个接口。</p></li><li><p>interface&nbsp;接口<br>interface&nbsp;关键字用来声明新的&nbsp;Java&nbsp;接口，接口是方法的集合。<br>接口是&nbsp;Java&nbsp;语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。&nbsp;<br>实现了接口的任何类都必须提供在该接口中的所有方法的实现。一个类可以实现多个接口。</p></li><li><p>native&nbsp;本地<br>native&nbsp;关键字可以应用于方法，以指示该方法是用&nbsp;Java&nbsp;以外的语言实现的。</p></li><li><p>new&nbsp;新,创建<br>new&nbsp;关键字用于创建类的新实例。&nbsp;<br>new&nbsp;关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。&nbsp;<br>参数集合必须与类的构造方法的签名匹配。&nbsp;<br>=&nbsp;左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。</p></li><li><p>static&nbsp;静态<br>static&nbsp;关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。&nbsp;<br>通常，static&nbsp;关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。<br>static（内部）类可以被其他类实例化和引用（即使它是顶级类）。在上面的示例中，另一个类中的代码可以实例化&nbsp;MyStaticClass&nbsp;类，方法是用包含它的类名来限定其名称，如&nbsp;MyClass.MyStaticClass。&nbsp;<br>static&nbsp;字段（类的成员变量）在类的所有实例中只存在一次。&nbsp;<br>可以从类的外部调用&nbsp;static&nbsp;方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。<br>模式：public&nbsp;final&nbsp;static&nbsp;&lt;type&gt;&nbsp;varName&nbsp;=&nbsp;&lt;value&gt;;&nbsp;通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。在上面的示例中，另一个类可以用&nbsp;MyClass.MAX_OBJECTS&nbsp;形式来引用&nbsp;MAX_OBJECTS&nbsp;常量。</p></li><li><p>strictfp&nbsp;严格,精准<br>strictfp的意思是FP-strict，也就是说精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。<br>可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字</p></li><li><p>synchronized线程、同步<br>synchronized&nbsp;关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。&nbsp;<br>synchronized&nbsp;关键字可防止代码的关键代码段一次被多个线程执行。<br>如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。&nbsp;<br>如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。&nbsp;<br>如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。</p></li><li><p>transient&nbsp;短暂<br>transient&nbsp;关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。<br>当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。<br>Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。<br>transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。</p></li><li><p>volatile&nbsp;易失<br>volatile&nbsp;关键字用于表示可以被多个线程异步修改的成员变量。<br>注意：volatile&nbsp;关键字在许多&nbsp;Java&nbsp;虚拟机中都没有实现。&nbsp;volatile&nbsp;的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。<br>Java&nbsp;语言中的&nbsp;volatile&nbsp;变量可以被看作是一种&nbsp;“程度较轻的&nbsp;synchronized”；与&nbsp;synchronized&nbsp;块相比，volatile&nbsp;变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是&nbsp;synchronized&nbsp;的一部分。</p></li></ol><h4 id="3-程序控制语句"><a href="#3-程序控制语句" class="headerlink" title="3.&nbsp;程序控制语句"></a>3.&nbsp;程序控制语句</h4><ol><li><p>break&nbsp;跳出，中断<br>break&nbsp;关键字用于提前退出&nbsp;for、while&nbsp;或&nbsp;do&nbsp;循环，或者在&nbsp;switch&nbsp;语句中用来结束&nbsp;case&nbsp;块。&nbsp;<br>break&nbsp;总是退出最深层的&nbsp;while、for、do&nbsp;或&nbsp;switch&nbsp;语句。</p></li><li><p>continue&nbsp;继续<br>continue&nbsp;关键字用来跳转到&nbsp;for、while&nbsp;或&nbsp;do&nbsp;循环的下一个迭代。<br>continue&nbsp;总是跳到最深层&nbsp;while、for&nbsp;或&nbsp;do&nbsp;语句的下一个迭代。</p></li><li><p>return&nbsp;返回<br>return&nbsp;关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。&nbsp;<br>如果方法具有非&nbsp;void&nbsp;的返回类型，return&nbsp;语句必须具有相同或兼容类型的参数。&nbsp;<br>返回值两侧的括号是可选的。</p></li><li><p>do&nbsp;运行<br>do&nbsp;关键字用于指定一个在每次迭代结束时检查其条件的循环。&nbsp;<br>do&nbsp;循环体至少执行一次。&nbsp;<br>条件表达式后面必须有分号。</p></li><li><p>while&nbsp;循环<br>while&nbsp;关键字用于指定一个只要条件为真就会重复的循环。</p></li><li><p>if&nbsp;如果<br>if&nbsp;关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。&nbsp;<br>if&nbsp;语句可以有可选的&nbsp;else&nbsp;子句，该子句包含条件为&nbsp;false&nbsp;时将执行的代码。  &nbsp;<br>包含&nbsp;boolean&nbsp;操作数的表达式只能包含&nbsp;boolean&nbsp;操作数。</p></li><li><p>else&nbsp;否则<br>else&nbsp;关键字总是在&nbsp;if-else&nbsp;语句中与&nbsp;if&nbsp;关键字结合使用。else&nbsp;子句是可选的，如果&nbsp;if&nbsp;条件为&nbsp;false，则执行该子句。</p></li><li><p>for&nbsp;循环<br>for&nbsp;关键字用于指定一个在每次迭代结束前检查其条件的循环。&nbsp;<br>for&nbsp;语句的形式为&nbsp;for(initialize;&nbsp;condition;&nbsp;increment)&nbsp;<br>控件流进入&nbsp;for&nbsp;语句时，将执行一次&nbsp;initialize&nbsp;语句。&nbsp;<br>每次执行循环体之前将计算&nbsp;condition&nbsp;的结果。如果&nbsp;condition&nbsp;为&nbsp;true，则执行循环体。&nbsp;<br>每次执行循环体之后，在计算下一个迭代的&nbsp;condition&nbsp;之前，将执行&nbsp;increment&nbsp;语句。</p></li><li><p>instanceof&nbsp;实例<br>instanceof&nbsp;关键字用来确定对象所属的类。</p></li><li><p>switch&nbsp;观察<br>switch&nbsp;语句用于基于某个表达式选择执行多个代码块中的某一个。&nbsp;<br>switch&nbsp;条件的计算结果必须等于&nbsp;byte、char、short&nbsp;或&nbsp;int。&nbsp;<br>case&nbsp;块没有隐式结束点。break&nbsp;语句通常在每个&nbsp;case&nbsp;块末尾使用，用于退出&nbsp;switch&nbsp;语句。&nbsp;<br>如果没有&nbsp;break&nbsp;语句，执行流将进入所有后面的&nbsp;case&nbsp;和/或&nbsp;default&nbsp;块。</p></li><li><p>case&nbsp;返回观察里的结果<br>case&nbsp;用来标记&nbsp;switch&nbsp;语句中的每个分支。&nbsp;<br>case&nbsp;块没有隐式结束点。break&nbsp;语句通常在每个&nbsp;case&nbsp;块末尾使用，用于退出&nbsp;switch&nbsp;语句。&nbsp;<br>如果没有&nbsp;break&nbsp;语句，执行流将进入所有后面的&nbsp;case&nbsp;和/或&nbsp;default&nbsp;块。</p></li><li><p>default&nbsp;默认<br>default&nbsp;关键字用来标记&nbsp;switch&nbsp;语句中的默认分支。&nbsp;<br>default&nbsp;块没有隐式结束点。break&nbsp;语句通常在每个&nbsp;case&nbsp;或&nbsp;default&nbsp;块的末尾使用，以便在完成块时退出&nbsp;switch&nbsp;语句。&nbsp;<br>如果没有&nbsp;default&nbsp;语句，其参数与任何&nbsp;case&nbsp;块都不匹配的&nbsp;switch&nbsp;语句将不执行任何操作。</p></li></ol><h4 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4.&nbsp;错误处理"></a>4.&nbsp;错误处理</h4><ol><li><p>try&nbsp;捕获异常<br>try&nbsp;关键字用于包含可能引发异常的语句块。&nbsp;<br>每个&nbsp;try&nbsp;块都必须至少有一个&nbsp;catch&nbsp;或&nbsp;finally&nbsp;子句。&nbsp;<br>如果某个特定异常类未被任何&nbsp;catch&nbsp;子句处理，该异常将沿着调用栈递归地传播到下一个封闭&nbsp;try&nbsp;块。如果任何封闭&nbsp;try&nbsp;块都未捕获到异常，Java&nbsp;解释器将退出，并显示错误消息和堆栈跟踪信息。</p></li><li><p>catch&nbsp;处理异常<br>catch&nbsp;关键字用来在&nbsp;try-catch&nbsp;或&nbsp;try-catch-finally&nbsp;语句中定义异常处理块。&nbsp;<br>开始和结束标记&nbsp;{&nbsp;和&nbsp;}&nbsp;是&nbsp;catch&nbsp;子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。&nbsp;<br>每个&nbsp;try&nbsp;块都必须至少有一个&nbsp;catch&nbsp;或&nbsp;finally&nbsp;子句。&nbsp;<br>如果某个特定异常类未被任何&nbsp;catch&nbsp;子句处理，该异常将沿着调用栈递归地传播到下一个封闭&nbsp;try&nbsp;块。如果任何封闭&nbsp;try&nbsp;块都未捕获到异常，Java&nbsp;解释器将退出，并显示错误消息和堆栈跟踪信息。</p></li><li><p>throw&nbsp;抛出一个异常对象<br>throw&nbsp;关键字用于引发异常。&nbsp;<br>throw&nbsp;语句将&nbsp;java.lang.Throwable&nbsp;作为参数。Throwable&nbsp;在调用栈中向上传播，直到被适当的&nbsp;catch&nbsp;块捕获。&nbsp;<br>引发非&nbsp;RuntimeException&nbsp;异常的任何方法还必须在方法声明中使用&nbsp;throws&nbsp;修饰符来声明它引发的异常。</p></li><li><p>throws&nbsp;声明一个异常可能被抛出<br>throws&nbsp;关键字可以应用于方法，以便指出方法引发了特定类型的异常。&nbsp;<br>throws&nbsp;关键字将逗号分隔的&nbsp;java.lang.Throwables&nbsp;列表作为参数。&nbsp;<br>引发非&nbsp;RuntimeException&nbsp;异常的任何方法还必须在方法声明中使用&nbsp;throws&nbsp;修饰符来声明它引发的异常。&nbsp;<br>要在&nbsp;try-catch&nbsp;块中包含带&nbsp;throws&nbsp;子句的方法的调用，必须提供该方法的调用者。</p></li></ol><h4 id="5-包相关"><a href="#5-包相关" class="headerlink" title="5.&nbsp;包相关"></a>5.&nbsp;包相关</h4><ol><li><p>import&nbsp;引入<br>import&nbsp;关键字使一个包中的一个或所有类在当前&nbsp;Java&nbsp;源文件中可见。可以不使用完全限定的类名来引用导入的类。&nbsp;<br>当多个包包含同名的类时，许多&nbsp;Java&nbsp;程序员只使用特定的&nbsp;import&nbsp;语句（没有“*”）来避免不确定性。</p></li><li><p>package&nbsp;包<br>package&nbsp;关键字指定在&nbsp;Java&nbsp;源文件中声明的类所驻留的&nbsp;Java&nbsp;包。&nbsp;<br>package&nbsp;语句（如果出现）必须是&nbsp;Java&nbsp;源文件中的第一个非注释性文本。<br>例:java.lang.Object。&nbsp;<br>如果&nbsp;Java&nbsp;源文件不包含&nbsp;package&nbsp;语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。</p></li></ol><h4 id="6-基本类型"><a href="#6-基本类型" class="headerlink" title="6.&nbsp;基本类型"></a>6.&nbsp;基本类型</h4><ol><li><p>&nbsp;boolean&nbsp;布尔型<br>boolean&nbsp;是&nbsp;Java&nbsp;原始类型。boolean&nbsp;变量的值可以是&nbsp;true&nbsp;或&nbsp;false。<br>boolean&nbsp;变量只能以&nbsp;true&nbsp;或&nbsp;false&nbsp;作为值。boolean&nbsp;不能与数字类型相互转换。&nbsp;<br>包含&nbsp;boolean&nbsp;操作数的表达式只能包含&nbsp;boolean&nbsp;操作数。&nbsp;<br>Boolean&nbsp;类是&nbsp;boolean&nbsp;原始类型的包装对象类。</p></li><li><p>byte&nbsp;字节型<br>byte&nbsp;是&nbsp;Java&nbsp;原始类型。byte&nbsp;可存储在&nbsp;[-128,&nbsp;127]&nbsp;范围以内的整数值。&nbsp;<br>Byte&nbsp;类是&nbsp;byte&nbsp;原始类型的包装对象类。它定义代表此类型的值的范围的&nbsp;MIN_VALUE&nbsp;和&nbsp;MAX_VALUE&nbsp;常量。&nbsp;<br>Java&nbsp;中的所有整数值都是&nbsp;32&nbsp;位的&nbsp;int&nbsp;值，除非值后面有&nbsp;l&nbsp;或&nbsp;L（如&nbsp;235L），这表示该值应解释为&nbsp;long。</p></li><li><p>char&nbsp;字符型<br>char&nbsp;是&nbsp;Java&nbsp;原始类型。char&nbsp;变量可以存储一个&nbsp;Unicode&nbsp;字符。&nbsp;<br>可以使用下列&nbsp;char&nbsp;常量：\b -&nbsp;空格,&nbsp;\f -&nbsp;换页,&nbsp;\n -&nbsp;换行,&nbsp;\r -&nbsp;回车,&nbsp;\t -&nbsp;水平制表符,&nbsp;\‘ -&nbsp;单引号,&nbsp;\“ -&nbsp;双引号,&nbsp;\\ -&nbsp;反斜杠,&nbsp;\xxx -&nbsp;采用&nbsp;xxx&nbsp;编码的&nbsp;Latin-1&nbsp;字符。\x&nbsp;和&nbsp;\xx&nbsp;均为合法形式，但可能引起混淆。&nbsp;\uxxxx -&nbsp;采用十六进制编码&nbsp;xxxx&nbsp;的&nbsp;Unicode&nbsp;字符。&nbsp;<br>Character&nbsp;类包含一些可用来处理&nbsp;char&nbsp;变量的&nbsp;static&nbsp;方法，这些方法包括&nbsp;isDigit()、isLetter()、isWhitespace()&nbsp;和&nbsp;toUpperCase()。&nbsp;<br>char&nbsp;值没有符号。</p></li><li><p>double&nbsp;双精度<br>double&nbsp;是&nbsp;Java&nbsp;原始类型。double&nbsp;变量可以存储双精度浮点值。&nbsp;<br>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。&nbsp;<br>Java&nbsp;浮点数值可代表无穷大和&nbsp;NaN（非数值）。Double&nbsp;包装对象类用来定义常量&nbsp;MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY&nbsp;和&nbsp;NaN。</p></li><li><p>float&nbsp;浮点<br>float&nbsp;是&nbsp;Java&nbsp;原始类型。float&nbsp;变量可以存储单精度浮点值。&nbsp;<br>使用此关键字时应遵循下列规则：&nbsp;<br>Java&nbsp;中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上&nbsp;f&nbsp;或&nbsp;F，如&nbsp;0.01f。&nbsp;<br>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。&nbsp;<br>Java&nbsp;浮点数值可代表无穷大和&nbsp;NaN（非数值）。Float&nbsp;包装对象类用来定义常量&nbsp;MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY&nbsp;和&nbsp;NaN。</p></li><li><p>int&nbsp;整型<br>int&nbsp;是&nbsp;Java&nbsp;原始类型。int&nbsp;变量可以存储&nbsp;32&nbsp;位的整数值。&nbsp;<br>Integer&nbsp;类是&nbsp;int&nbsp;原始类型的包装对象类。它定义代表此类型的值的范围的&nbsp;MIN_VALUE&nbsp;和&nbsp;MAX_VALUE&nbsp;常量。&nbsp;<br>Java&nbsp;中的所有整数值都是&nbsp;32&nbsp;位的&nbsp;int&nbsp;值，除非值后面有&nbsp;l&nbsp;或&nbsp;L（如&nbsp;235L），这表示该值应解释为&nbsp;long。</p></li><li><p>&nbsp;long&nbsp;长整型<br>long&nbsp;是&nbsp;Java&nbsp;原始类型。long&nbsp;变量可以存储&nbsp;64&nbsp;位的带符号整数。&nbsp;<br>Long&nbsp;类是&nbsp;long&nbsp;原始类型的包装对象类。它定义代表此类型的值的范围的&nbsp;MIN_VALUE&nbsp;和&nbsp;MAX_VALUE&nbsp;常量。&nbsp;<br>Java&nbsp;中的所有整数值都是&nbsp;32&nbsp;位的&nbsp;int&nbsp;值，除非值后面有&nbsp;l&nbsp;或&nbsp;L（如&nbsp;235L），这表示该值应解释为&nbsp;long。</p></li><li><p>short&nbsp;短整型<br>short&nbsp;是&nbsp;Java&nbsp;原始类型。short&nbsp;变量可以存储&nbsp;16&nbsp;位带符号的整数。&nbsp;<br>Short&nbsp;类是&nbsp;short&nbsp;原始类型的包装对象类。它定义代表此类型的值的范围的&nbsp;MIN_VALUE&nbsp;和&nbsp;MAX_VALUE&nbsp;常量。&nbsp;<br>Java&nbsp;中的所有整数值都是&nbsp;32&nbsp;位的&nbsp;int&nbsp;值，除非值后面有&nbsp;l&nbsp;或&nbsp;L（如&nbsp;235L），这表示该值应解释为&nbsp;long。</p></li></ol><h4 id="7-变量引用"><a href="#7-变量引用" class="headerlink" title="7.&nbsp;变量引用"></a>7.&nbsp;变量引用</h4><ol><li><p>super&nbsp;父类,超类<br>super&nbsp;关键字用于引用使用该关键字的类的超类。&nbsp;<br>作为独立语句出现的&nbsp;super&nbsp;表示调用超类的构造方法。&nbsp;<br>super.&lt;methodName&gt;()&nbsp;表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。</p></li><li><p>&nbsp;this&nbsp;本类<br>this&nbsp;关键字用于引用当前实例。&nbsp;<br>当引用可能不明确时，可以使用&nbsp;this&nbsp;关键字来引用当前的实例。</p></li><li><p>void&nbsp;无返回值<br>void&nbsp;关键字表示&nbsp;null&nbsp;类型。&nbsp;<br>void&nbsp;可以用作方法的返回类型，以指示该方法不返回值。</p></li></ol><h4 id="8-保留字"><a href="#8-保留字" class="headerlink" title="8.&nbsp;保留字"></a>8.&nbsp;保留字</h4><p>正确识别java语言的关键字（keyword）和保留字（reserved&nbsp;word）是十分重要的。Java的关键字对java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等。保留字是为java预留的关键字，他们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。</p><p>识别java语言的关键字，不要和其他语言如c/c++的关键字混淆。&nbsp;<br>const和goto是java的保留字。&nbsp;所有的关键字都是小写&nbsp;</p><ol><li><p>goto&nbsp;跳转<br>goto&nbsp;保留关键字，但无任何作用。结构化程序设计完全不需要&nbsp;goto&nbsp;语句即可完成各种流程，而&nbsp;goto&nbsp;语句的使用往往会使程序的可读性降低，所以&nbsp;Java&nbsp;不允许&nbsp;goto&nbsp;跳转。</p></li><li><p>const&nbsp;静态<br>const&nbsp;保留字，是一个类型修饰符，使用const声明的对象不能更新。与final某些类似。</p></li><li><p>native&nbsp;本地<br>Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。&nbsp;<br>　　可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤：&nbsp;<br>　　１、在Java中声明native()方法，然后编译；&nbsp;<br>　　２、用javah产生一个.h文件；&nbsp;<br>　　３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）；&nbsp;<br>　　４、将第三步的.cpp文件编译成动态链接库文件；&nbsp;<br>　　５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学Java的准备工作</title>
      <link href="/posts/64268.html"/>
      <url>/posts/64268.html</url>
      
        <content type="html"><![CDATA[<p>大学没有ssm框架的课程，找工作必须要会这个，那我自学。</p><p>从最基础的开始，就当复习了。</p><p>视频教程看b站狂神说，动力节点，尚硅谷，黑马的。</p><h1 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h1><h2 id="1-1从eclipse到idea"><a href="#1-1从eclipse到idea" class="headerlink" title="1.1从eclipse到idea"></a>1.1从eclipse到idea</h2><p>idea确实比eclipse先进，按照教学选择用idea</p><h3 id="1-1-1安装idea"><a href="#1-1-1安装idea" class="headerlink" title="1.1.1安装idea"></a>1.1.1安装idea</h3><p>去官网下载idea的最新版，不要下载社区版，后续社区版不能用spring</p><h3 id="1-1-2安装无限试用插件"><a href="#1-1-2安装无限试用插件" class="headerlink" title="1.1.2安装无限试用插件"></a>1.1.2安装无限试用插件</h3><p>学生优惠只有一年，还是太贵了，现在也只是个人学习使用，等以后工作用上的时候再补票入正吧。</p><h2 id="1-2安装Java环境"><a href="#1-2安装Java环境" class="headerlink" title="1.2安装Java环境"></a>1.2安装Java环境</h2><p>大一就安装好了</p><h3 id="1-2-1安装jdk"><a href="#1-2-1安装jdk" class="headerlink" title="1.2.1安装jdk"></a>1.2.1安装jdk</h3><p>在官网下载的jdk13</p><h3 id="1-2-2测试是否安装成功"><a href="#1-2-2测试是否安装成功" class="headerlink" title="1.2.2测试是否安装成功"></a>1.2.2测试是否安装成功</h3><p>win+R运行cmd</p><p>输入java -version查看</p><p><img src="https://cdn.jsdelivr.net/gh/limitlm/mypic/img/202111161659540.png" alt="安装成功"></p><h1 id="2开始编程"><a href="#2开始编程" class="headerlink" title="2开始编程"></a>2开始编程</h1><h2 id="2-1写个hello-world吧"><a href="#2-1写个hello-world吧" class="headerlink" title="2.1写个hello world吧"></a>2.1写个hello world吧</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Java入门到入土正式开始了</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章 Front-matter 介绍</title>
      <link href="/posts/64974.html"/>
      <url>/posts/64974.html</url>
      
        <content type="html"><![CDATA[<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/posts/47193.html"/>
      <url>/posts/47193.html</url>
      
        <content type="html"><![CDATA[<h1 id="markdown基础教程"><a href="#markdown基础教程" class="headerlink" title="markdown基础教程"></a>markdown基础教程</h1><p>三分钟掌握markdown基本用法</p><hr><h2 id="需要特别注意的点"><a href="#需要特别注意的点" class="headerlink" title="需要特别注意的点"></a>需要特别注意的点</h2><ol><li>通常，格式控制符与文本内容需要 <strong>保留一个空格</strong>  </li><li>段落之间需要<strong>空格一行</strong></li><li>在VSCode上编辑，同一行内按回车是不能换行的，在末尾加<strong>两个空格</strong>表示换行<h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5></li></ol><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p># 一级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>## 二级标题</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><hr><p>### 三级标题</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><hr><p>#### 四级标题</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><hr><p>##### 五级标题</p><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><hr><p>###### 六级标题</p><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表分为无序列表和有序列表，无序列表在文本前加上+，-，*即可：</p><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><p>而有序列表仅需要在文本前面加上1.即可（记得加上空格，换行会自动补全序号）：</p><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><h2 id="段落分隔符"><a href="#段落分隔符" class="headerlink" title="段落分隔符"></a>段落分隔符</h2><p>通过—或者***或者___即可添加段落分割线</p><hr><hr><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>表示引用的内容。仅需要在文本前面加上&gt;即可（不加空格也行）：</p><blockquote><p>引用的内容</p></blockquote><p>可以加多个&gt;表示多级引用</p><blockquote><p>一级</p><blockquote><p>二级</p><blockquote><p>三级</p></blockquote></blockquote></blockquote><h2 id="文字修饰"><a href="#文字修饰" class="headerlink" title="文字修饰"></a>文字修饰</h2><p>*或_用来 修饰 <em>斜体</em><br>**或__用来 修饰 <strong>粗体</strong><br>***或者___用来修饰 <em><strong>斜粗体</strong></em><br>~~ 用来修饰 <del>删减体</del><br>用html语法的 &lt;u&gt;文本内容&lt;/u&gt; 来修饰 <u>下划线</u></p><h2 id="字体相关"><a href="#字体相关" class="headerlink" title="字体相关"></a>字体相关</h2><p>通过html语法来改变字体属性，如字体大小、颜色<br>&lt;font face=”黑体”&gt;我是黑体字<br>&lt;font face=”微软雅黑”&gt;我是微软雅黑<br>&lt;font face=”STCAIYUN”&gt;我是华文彩云<br>&lt;font color=#0099ff size=12 face=”黑体”&gt;黑体<br>&lt;font color=gray size=5&gt;gray<br>&lt;font color=#00ffff size=3&gt;null  </p><hr><p>效果如下</p><hr><p><font face="黑体">我是黑体字</font></p><p><font face="微软雅黑">我是微软雅黑</font></p><p><font face="STCAIYUN">我是华文彩云</font></p><p><font color="#0099ff" size="12" face="黑体">黑体</font></p><p><font color="gray" size="5">gray</font></p><p><font color="#00ffff" size="3">null</font></p><h2 id="链接及图片"><a href="#链接及图片" class="headerlink" title="链接及图片"></a>链接及图片</h2><p>通过[描述](地址)来添加链接<br><a href="https://limitlm.github.io/">欢迎访问我的博客</a></p><p>而在前面加一个!即为添加图片，其中在链接后加”内容”表示鼠标悬停时显示的信息<br><img src="https://github.com/limitlm.png" alt="我的github头像" title="鼠标悬停描述"></p><p>如果是用Hexo，它有特殊处理，可以直接使用img标签<br>&lt;img src=”” width=”50%” height=”50%”&gt;<br>可以添加样式，比如改变图片显示大小</p><img src="https://github.com/limitlm.png" width="50%" height="50%"><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>|姓名|性别|年龄|<br>|:-:|:–|–:|<br>|我|男|22|<br>|你| | |  </p><p>效果如下，第二行表示内容对齐格式，第一格表示内容居中，第二个表示居左，第三个表示居右。</p><table><thead><tr><th align="center">姓名</th><th align="left">性别</th><th align="right">年龄</th></tr></thead><tbody><tr><td align="center">我</td><td align="left">男</td><td align="right">22</td></tr><tr><td align="center">你</td><td align="left"></td><td align="right"></td></tr></tbody></table><h2 id="段落代码块"><a href="#段落代码块" class="headerlink" title="段落代码块"></a>段落代码块</h2><p>每行缩进4个空格或 1个 Tab表示  </p><pre><code>第一行第二行第三行</code></pre><h2 id="插入高亮代码"><a href="#插入高亮代码" class="headerlink" title="插入高亮代码"></a>插入高亮代码</h2><p>行内用`内容`表示 <code>高亮</code>  </p><p>代码块用```内容```，后面加java或python等表示语法高亮<br>首字母要小写！！！<br>访问<a href="https://prismjs.com/#supported-languages" title="因为Java首字母大写了以为高亮失效排查了大半天">prismjs官网</a>查看支持高亮的语言及写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>跟链接的语法一样，只是变成了页内锚点（也许不支持中文）<br>[回到顶部](#test)<br><a href="#test">回到顶部</a></p><pre><code>只能跳转一级标题，五级标题，六级标题。具体原因暂时未知</code></pre><h2 id="GitHub的emoji表情"><a href="#GitHub的emoji表情" class="headerlink" title="GitHub的emoji表情"></a>GitHub的emoji表情</h2><p><span class="github-emoji"><span>😊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>具体每一个表情的符号码，可以查询 GitHub 的<a href="http://www.emoji-cheat-sheet.com/">官方网页</a></p><h2 id="其他待补充"><a href="#其他待补充" class="headerlink" title="其他待补充"></a>其他待补充</h2><p>如高阶语法，数学公式，流程图等</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Hexo GitHub 从零开始搭建个人博客</title>
      <link href="/posts/21301.html"/>
      <url>/posts/21301.html</url>
      
        <content type="html"><![CDATA[<h2 id="输密码才能看"><a href="#输密码才能看" class="headerlink" title="输密码才能看"></a>输密码才能看</h2>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
